{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kustomizer","text":"<p>Kustomizer is an experimental package manager for distributing Kubernetes configuration as OCI artifacts. It offers commands to publish, fetch, diff, customize, validate, apply and prune Kubernetes resources.</p>"},{"location":"#concepts","title":"Concepts","text":""},{"location":"#oci-artifacts","title":"OCI Artifacts","text":"<p>Kustomizer offers a way to distribute Kubernetes configuration using container registries. It can package Kubernetes manifests in an OCI image and store them in a container registry, right next to your applications' images.</p> <p>Kustomizer comes with commands for managing OCI artifacts:</p> <ul> <li><code>kustomizer push artifact oci://&lt;image-url&gt;:&lt;tag&gt; -k [-f] [-p]</code></li> <li><code>kustomizer tag artifact oci://&lt;image-url&gt;:&lt;tag&gt; &lt;new-tag&gt;</code></li> <li><code>kustomizer list artifacts oci://&lt;repo-url&gt; --semver &lt;condition&gt;</code></li> <li><code>kustomizer pull artifact oci://&lt;image-url&gt;:&lt;tag&gt;</code></li> <li><code>kustomizer inspect artifact oci://&lt;image-url&gt;:&lt;tag&gt;</code></li> <li><code>kustomizer diff artifact &lt;oci url&gt; &lt;oci url&gt;</code></li> </ul> <p>Kustomizer is compatible with Docker Hub, GHCR, ACR, ECR, GCR, Artifactory, self-hosted Docker Registry and others. For auth, it uses the credentials from <code>~/.docker/config.json</code>.</p> <p>Assuming you've automated your application's build &amp; push workflow using Docker, you can extend the automation to do the same for your Kubernetes configuration that describes how your application gets deployed.</p>"},{"location":"#sign-verify-artifacts","title":"Sign &amp; Verify Artifacts","text":"<p>Kustomizer can sign and verify artifacts using sigstore/cosign either with static keys, Cloud KMS or keyless signatures (when running kustomizer with GitHub Actions):</p> <ul> <li><code>kustomizer push artifact --sign --cosign-key &lt;private key&gt;</code></li> <li><code>kustomizer pull artifact --verify --cosign-key &lt;public key&gt;</code></li> <li><code>kustomizer inspect artifact --verify --cosign-key &lt;public key&gt;</code></li> </ul> <p>For an example on how to secure your Kubernetes supply chain with Kustomizer and Cosign please see this guide.</p>"},{"location":"#resource-inventories","title":"Resource Inventories","text":"<p>Kustomizer offers a way for grouping Kubernetes resources. It generates an inventory which keeps track of the set of resources applied together. The inventory is stored inside the cluster in a <code>ConfigMap</code> object and contains metadata such as the resources provenance and revision.</p> <p>The Kustomizer garbage collector uses the inventory to keep track of the applied resources and prunes the Kubernetes objects that were previously applied but are missing from the current revision.</p> <p>You specify an inventory name and namespace at apply time, and then you can use Kustomizer to list, diff, update, and delete inventories:</p> <ul> <li><code>kustomizer apply inventory &lt;name&gt; [--artifact &lt;oci url&gt;] [-f] [-p] -k</code></li> <li><code>kustomizer diff inventory &lt;name&gt; [-a] [-f] [-p] -k</code></li> <li><code>kustomizer get inventories --namespace &lt;namespace&gt;</code></li> <li><code>kustomizer inspect inventory &lt;name&gt; --namespace &lt;namespace&gt;</code></li> <li><code>kustomizer delete inventory &lt;name&gt; --namespace &lt;namespace&gt;</code></li> </ul> <p>When applying resources from OCI artifacts, Kustomizer saves the artifacts URL and the image SHA-2 digest in the inventory. For deterministic and repeatable apply operations, you could use digests instead of tags.</p>"},{"location":"#encryption-at-rest","title":"Encryption at rest","text":"<p>Kustomizer has builtin support for encrypting and decrypting Kubernetes configuration (packaged as OCI artifacts) using age asymmetric keys.</p> <p>To securely distribute sensitive Kubernetes configuration to trusted users, you can encrypt the artifacts with their age public keys:</p> <ul> <li><code>kustomizer push artifact &lt;oci url&gt; --age-recipients &lt;public keys&gt;</code></li> </ul> <p>Users can access the artifacts by decrypting them with their age private keys:</p> <ul> <li><code>kustomizer inspect artifact &lt;oci url&gt; --age-identities &lt;private keys&gt;</code></li> <li><code>kustomizer pull artifact &lt;oci url&gt; --age-identities &lt;private keys&gt;</code></li> <li><code>kustomizer apply inventory -a &lt;oci url&gt; --age-identities &lt;private keys&gt;</code></li> <li><code>kustomizer diff inventory -a &lt;oci url&gt; --age-identities &lt;private keys&gt;</code></li> </ul>"},{"location":"#comparison-with-other-tools","title":"Comparison with other tools","text":""},{"location":"#vs-flux","title":"vs flux","text":"<p>Kustomizer produces OCI artifacts which are compatible with Flux. For more details on how to continuously deploy applications to Kubernetes clusters with Flux and Kustomizer please see this guide.</p> <p>Kustomizer is akin to Flux's kustomize-controller, and it shares the same reconcile engine that leverages Kubernetes server-side apply.</p> <p>Kustomizer can be used as intermediary step when migrating from CI driven deployments to Flux and GitOps. If you're running <code>kubectl apply</code> in your CI pipelines, replacing kubectl with kustomizer, would smooth the transition to a continuous delivery system powered by Flux.</p> <p>At times, Kustomizer serves as a testing bench for experimental features that are proposed to the Flux community. For example, Kustomizer is the project where features like staged-apply, garbage collection and diffing were first introduced.</p>"},{"location":"#vs-kubectl","title":"vs kubectl","text":"<p>Kustomizer makes use of k8s.io/cli-runtime for loading kubeconfigs and enables users to configure access to Kubernetes clusters in the same way as with kubectl.</p> <p>Compared to <code>kubectl apply -f</code>, <code>kustomizer apply -f</code> does things a little different:</p> <ul> <li>Validates all resources with dry-run apply, and applies only the ones with changes.</li> <li>Applies first custom resource definitions (CRDs) and namespaces, waits for them to register and only then applies the custom resources.</li> <li>Waits for the applied resources to be fully reconciled (checks the ready status of replicasets, services, ingresses, and other custom resources).</li> <li>Deletes stale objects like ConfigMaps and Secrets generated with Kustomize or other tools.</li> </ul> <p>Warn</p> <p>Note that if you use kubectl to edit an object managed by Kustomizer, all changes will be undone when Kustomizer reconciles an inventory containing that object. In addition, Kustomizer removes the <code>last-applied-configuration</code> annotation set by <code>kubectl apply</code>.</p>"},{"location":"#vs-kustomize","title":"vs kustomize","text":"<p>Kustomizer uses the sigs.k8s.io/kustomize Go packages to patch Kubernetes manifests and is compatible with <code>kustomize.config.k8s.io/v1beta1</code> overlays.</p> <p>Compared to <code>kustomize build</code>, <code>kustomizer build -k</code> does things a little different:</p> <ul> <li>Pulls resources from container registries.</li> <li>Reorders the resources according to the provided configuration.</li> <li>Allows <code>kustomization.yaml</code> to load files from outside their root directory.</li> <li>Disallows the usage of Kustomize exec and container-based plugins.</li> <li>Extra patches can be specified with <code>kustomizer build -k ./overlay --patch ./patch1.yaml --patch ./patch2.yaml</code>.</li> </ul>"},{"location":"#license","title":"License","text":"<p>Kustomizer is Apache 2.0 licensed and accepts contributions via GitHub pull requests.</p>"},{"location":"get-started/","title":"Get Started","text":"<p>This guide shows you how to use Kustomizer to publish and deploy a sample application.</p> <p>To follow this guide you'll need a GitHub account and a Kubernetes cluster version 1.20 or newer.</p>"},{"location":"get-started/#prerequisites","title":"Prerequisites","text":""},{"location":"get-started/#install-the-kustomizer-cli","title":"Install the Kustomizer CLI","text":"<p>Install the latest release on macOS or Linux with:</p> <pre><code>brew install stefanprodan/tap/kustomizer\n</code></pre> <p>For other installation methods, see the CLI install documentation.</p>"},{"location":"get-started/#login-to-github-container-registry","title":"Login to GitHub Container Registry","text":"<p>Generate a personal access token (PAT) with read and write access to GitHub Container Registry (GHCR).</p> <p>Export you GitHub username:</p> <pre><code>export GITHUB_USER=\"YOUR-GITHUB-USERNAME\"\n</code></pre> <p>Use the PAT to sign in to the container registry service at ghcr.io:</p> <pre><code>echo &lt;PAT&gt; | docker login ghcr.io -u ${GITHUB_USER} --password-stdin\n</code></pre> <p>Other container registries</p> <p>Besides GHCR, Kustomizer is compatible with Docker Hub, ACR, ECR, GCR, Artifactory, self-hosted Docker Registry v2 and any other registry that conforms to the Open Container Initiative.</p>"},{"location":"get-started/#publish-the-app-config","title":"Publish the app config","text":"<p>You'll be using a sample web application composed of two podinfo instances called <code>frontend</code> and <code>backend</code>, and a redis instance called <code>cache</code>.</p>"},{"location":"get-started/#clone-the-demo-app-repository","title":"Clone the demo app repository","text":"<p>Clone the Kustomizer Git repository locally:</p> <pre><code>git clone https://github.com/stefanprodan/kustomizer\ncd kustomizer\n</code></pre> <p>The sample application configuration is a Kustomize overlay located at <code>./examples/demo-app</code>.</p>"},{"location":"get-started/#build-and-push-the-app-config-to-ghcr","title":"Build and push the app config to GHCR","text":"<p>Export the config image URL and version:</p> <pre><code>export CONFIG_IMAGE=\"ghcr.io/${GITHUB_USER}/kustomizer-demo-app\"\nexport CONFIG_VERSION=\"1.0.0\"\n</code></pre> <p>Push the config image to your GHCR repository:</p> <pre><code>$ kustomizer push artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n-k ./examples/demo-app/\nbuilding manifests...\nNamespace/kustomizer-demo-app\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\nService/kustomizer-demo-app/backend\nService/kustomizer-demo-app/cache\nService/kustomizer-demo-app/frontend\nDeployment/kustomizer-demo-app/backend\nDeployment/kustomizer-demo-app/cache\nDeployment/kustomizer-demo-app/frontend\nHorizontalPodAutoscaler/kustomizer-demo-app/backend\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend\npushing image ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0\npublished digest ghcr.io/stefanprodan/kustomizer-demo-app@sha256:91d2bd8e0f1620e17e9d4c308ab87903644a952969d8ff52b601be0bffdca096\n</code></pre> <p>With the above command, Kustomizer builds the Kustomize overlay at <code>./examples/demo-app/</code>, packages the resulting multi-doc YAML as an OCI artifact and pushes the image to GHCR.</p> <p>After you run the command, the image repository can be accessed at <code>https://github.com/users/&lt;YOUR USERNAME&gt;/packages</code>.</p> <p>Generating Kubernetes manifests</p> <p>Besides Kustomize overlays, Kustomizer can package plain Kuberentes manifests.</p> <p>If you're using Cue to define your app config, export the  manifests to a multi-doc YAML file and pass the path to Kustomizer with <code>-f &lt;path to .yaml&gt;</code> e.g.:</p> <pre><code>cue export -p my-app -o yaml &gt; my-app.yaml\nkustomizer push artifact oci://docker.io/my-org/my-app:1.0.0 -f my-app.yaml\n</code></pre>"},{"location":"get-started/#publish-app-updates","title":"Publish app updates","text":"<p>Change the Redis container image tag with yq:</p> <pre><code>yq eval '.images[1].newTag=\"6.2.1\"' -i ./examples/demo-app/kustomization.yaml\n</code></pre> <p>Bump the config version:</p> <pre><code>export CONFIG_VERSION=\"1.0.1\"\n</code></pre> <p>Push the new version to GHCR:</p> <pre><code>kustomizer push artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n-k ./examples/demo-app/ </code></pre> <p>Tag the config image as latest:</p> <pre><code>kustomizer tag artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} latest\n</code></pre>"},{"location":"get-started/#deploy-the-app-on-kubernetes","title":"Deploy the app on Kubernetes","text":""},{"location":"get-started/#list-the-app-versions","title":"List the app versions","text":"<p>List all the available versions of the app config ordered by semver:</p> <pre><code>$ kustomizer list artifacts oci://${CONFIG_IMAGE} --semver=\"*\"\nVERSION URL                                                  \n1.0.1   oci://ghcr.io/stefanprodan/kustomizer-demo-app:1.0.1    \n1.0.0   oci://ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0\n</code></pre>"},{"location":"get-started/#install-the-app","title":"Install the app","text":"<p>Apply the <code>1.0.0</code> version of the Kubernetes configuration from the GHCR repository:</p> <pre><code>$ kustomizer apply inventory kustomizer-demo-app --wait --prune \\\n--artifact oci://${CONFIG_IMAGE}:1.0.0 \\\n--source ${CONFIG_IMAGE} \\\n--revision 1.0.0\npulling ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0\napplying 10 manifest(s)...\nNamespace/kustomizer-demo-app created\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k created\nService/kustomizer-demo-app/backend created\nService/kustomizer-demo-app/cache created\nService/kustomizer-demo-app/frontend created\nDeployment/kustomizer-demo-app/backend created\nDeployment/kustomizer-demo-app/cache created\nDeployment/kustomizer-demo-app/frontend created\nHorizontalPodAutoscaler/kustomizer-demo-app/backend created\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend created\nwaiting for resources to become ready...\nall resources are ready\n</code></pre> <p>With the above command, Kustomizer pulls the artifact from GHCR, extracts the Kubernetes resources and validates them against the Kubernetes API, applies the resources with server-side apply, then waits for the workloads to become ready.</p> <p>List inventories with:</p> <pre><code>$ kustomizer get inventories -n default\nNAME                ENTRIES SOURCE                                      REVISION    LAST APPLIED         \nkustomizer-demo-app 10      ghcr.io/stefanprodan/kustomizer-demo-app    1.0.0       2021-12-16T10:33:10Z\n</code></pre> <p>At apply time, Kustomizer creates an inventory to keep track of the set of resources applied together. The inventory is stored inside the cluster in a <code>ConfigMap</code> object and contains metadata such as the resources IDs, provenance and revision.</p> <p>Inspect the inventory with:</p> <pre><code>$ kustomizer inspect inv kustomizer-demo-app -n default\nInventory: default/kustomizer-demo-app\nLastAppliedAt: 2021-12-20T23:05:45Z\nSource: oci://ghcr.io/stefanprodan/kustomizer-demo-app\nRevision: 1.0.0\nArtifacts:\n- oci://ghcr.io/stefanprodan/kustomizer-demo-app@sha256:19ded6e1dbe3eb859bd0f0fa6aa1960f6975097af8f19e252b951cf3e9e9e6e2\nResources:\n- Namespace/kustomizer-demo-app\n- ConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\n- Service/kustomizer-demo-app/backend\n- Service/kustomizer-demo-app/cache\n- Service/kustomizer-demo-app/frontend\n- Deployment/kustomizer-demo-app/backend\n- Deployment/kustomizer-demo-app/cache\n- Deployment/kustomizer-demo-app/frontend\n- HorizontalPodAutoscaler/kustomizer-demo-app/backend\n- HorizontalPodAutoscaler/kustomizer-demo-app/frontend\n</code></pre> <p>At apply time, Kustomizer saves the artifact SHA-2 digest in the inventory.</p> <p>Using digests</p> <p>For deterministic and repeatable apply operations, you can specify the digest instead of the image tag e.g.:</p> <pre><code>kustomizer apply inventory kustomizer-demo-app --wait --prune \\\n--artifact oci://ghcr.io/stefanprodan/kustomizer-demo-app@sha256:19ded6e1dbe3eb859bd0f0fa6aa1960f6975097af8f19e252b951cf3e9e9e6e2\n</code></pre>"},{"location":"get-started/#update-the-app","title":"Update the app","text":"<p>Pull the latest version and review the changes to the live version:</p> <pre><code>$ kustomizer diff inventory kustomizer-demo-app --prune \\\n--artifact oci://${CONFIG_IMAGE}:latest \u25ba Deployment/kustomizer-demo-app/cache drifted\n@@ -5,7 +5,7 @@\n     deployment.kubernetes.io/revision: \"1\"\n     env: demo\n   creationTimestamp: \"2021-12-13T19:50:26Z\"\n-  generation: 1\n+  generation: 2\n   labels:\n     app.kubernetes.io/instance: webapp\n     inventory.kustomizer.dev/name: kustomizer-demo-app\n@@ -36,7 +36,7 @@\n       - command:\n         - redis-server\n         - /redis-master/redis.conf\n-        image: public.ecr.aws/docker/library/redis:6.2.0\n+        image: public.ecr.aws/docker/library/redis:6.2.1\n         imagePullPolicy: IfNotPresent\n         livenessProbe:\n           failureThreshold: 3\n</code></pre> <p>With the above command, Kustomizer performs a server-side apply dry-run for each resource, compares the result with the live version and prints the diff. If there are Kubernetes secrets in the diff output, their values will be masked. With <code>--prune</code>, the diff command will print all the stale objects  that would be garbage collected at apply time.</p> <p>Apply the latest configuration on your cluster:</p> <pre><code>$ kustomizer apply inventory kustomizer-demo-app --wait --prune \\\n--artifact oci://${CONFIG_IMAGE}:latest \\\n--source ${CONFIG_IMAGE} \\\n--revision 1.0.1\npulling ghcr.io/stefanprodan/kustomizer-demo-app:latest\napplying 10 manifest(s)...\nNamespace/kustomizer-demo-app unchanged\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k unchanged\nService/kustomizer-demo-app/backend unchanged\nService/kustomizer-demo-app/cache unchanged\nService/kustomizer-demo-app/frontend unchanged\nDeployment/kustomizer-demo-app/backend unchanged\nDeployment/kustomizer-demo-app/cache configured\nDeployment/kustomizer-demo-app/frontend unchanged\nHorizontalPodAutoscaler/kustomizer-demo-app/backend unchanged\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend unchanged\nwaiting for resources to become ready...\nall resources are ready\n</code></pre> <p>For deterministic and repeatable apply operations, you can specify the artifact's digest instead of a mutable tag like <code>latest</code> e.g. <code>--artifact oci://registry/repo/app@sha256:hash</code>.</p> <p>Inspect the latest version to find its digest:</p> <pre><code>$ kustomizer inspect artifact oci://${CONFIG_IMAGE}:latest | grep oci://\nArtifact: oci://ghcr.io/stefanprodan/kustomizer-demo-app@sha256:19ded6e1dbe3eb859bd0f0fa6aa1960f6975097af8f19e252b951cf3e9e9e6e2\n</code></pre>"},{"location":"get-started/#uninstall-the-app","title":"Uninstall the app","text":"<p>Delete all the Kubernetes resources from an inventory including the inventory storage:</p> <pre><code>$ kustomizer delete inventory kustomizer-demo-app --wait\nretrieving inventory...\ndeleting 10 manifest(s)...\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend deleted\nHorizontalPodAutoscaler/kustomizer-demo-app/backend deleted\nDeployment/kustomizer-demo-app/frontend deleted\nDeployment/kustomizer-demo-app/cache deleted\nDeployment/kustomizer-demo-app/backend deleted\nService/kustomizer-demo-app/frontend deleted\nService/kustomizer-demo-app/cache deleted\nService/kustomizer-demo-app/backend deleted\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k deleted\nNamespace/kustomizer-demo-app deleted\nConfigMap/default/kustomizer-demo-app deleted\nwaiting for resources to be terminated...\nall resources have been deleted\n</code></pre>"},{"location":"github-actions/","title":"Kustomizer GitHub Actions","text":"<p>You can use Kustomizer to push artifacts to container registries and deploy to Kubernetes from your GitHub workflows.</p>"},{"location":"github-actions/#usage","title":"Usage","text":"<p>To run Kustomizer commands on GitHub Linux runners, add the following steps to your GitHub workflow:</p> <pre><code>    steps:\n- name: Setup Kustomizer CLI\nuses: stefanprodan/kustomizer/action@main\nwith:\nversion: 2.0.0 # defaults to latest\narch: amd64 # can be amd64 or arm64\n- name: Run Kustomizer commands\nrun: kustomizer -v\n</code></pre>"},{"location":"github-actions/#publish-artifacts-to-ghcr","title":"Publish artifacts to GHCR","text":"<p>Example of publishing OCI artifacts to GitHub Container Registry:</p> <pre><code>name: publish\non:\npush:\ntag:\n- 'v*'\n\nenv:\nARTIFACT: oci://ghcr.io/${{github.repository_owner}}/${{github.event.repository.name}}\n\njobs:\nkustomizer:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v3\n- name: Login to GitHub Container Registry\nuses: docker/login-action@v2\nwith:\nregistry: ghcr.io\nusername: ${{ github.actor }}\npassword: ${{ secrets.GHCR_TOKEN }}\n- name: Setup kustomizer\nuses: stefanprodan/kustomizer/action@main\n- name: Push\nrun: |\nkustomizer push artifact ${ARTIFACT}:${{ github.ref_name }} -f ./deploy \\\n--source=${{ github.repositoryUrl }} \\\n--revision=\"${{ github.ref_name }}/${{ github.sha }}\"\n- name: Tag latest\nrun: |\nkustomizer tag artifact ${ARTIFACT}:${GITHUB_REF_NAME} latest\n</code></pre>"},{"location":"github-actions/#publish-signed-artifacts","title":"Publish signed artifacts","text":"<p>Example of publishing signed artifacts using cosgin keyless signatures and GitHub OIDC:</p> <pre><code>name: publish\non:\npush:\ntag:\n- 'v*'\n\npermissions:\ncontents: read # needed for checkout\nid-token: write # needed for keyless signing\npackages: write # needed for GHCR access\n\nenv:\nARTIFACT: oci://ghcr.io/${{github.repository_owner}}/${{github.event.repository.name}}\n\njobs:\nkustomizer:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v3\n- name: Setup cosign\nuses: sigstore/cosign-installer@main\n- name: Setup kustomizer\nuses: stefanprodan/kustomizer/action@main\n- name: Login to GitHub Container Registry\nuses: docker/login-action@v2\nwith:\nregistry: ghcr.io\nusername: ${{ github.actor }}\npassword: ${{ secrets.GITHUB_TOKEN }}\n- name: Push and sign\nrun: |\nkustomizer push artifact ${ARTIFACT}:${GITHUB_REF_NAME} -f ./deploy --sign \\\n--source=${{ github.repositoryUrl }} \\\n--revision=\"${{ github.ref_name }}/${{ github.sha }}\"\n- name: Tag latest\nrun: |\nkustomizer tag artifact ${ARTIFACT}:${GITHUB_REF_NAME} latest\n</code></pre>"},{"location":"github-actions/#deploy-to-kubernetes-from-ghcr","title":"Deploy to Kubernetes from GHCR","text":"<p>Example of applying Kubernetes manifests from an OCI artifact:</p> <pre><code>name: deploy\non:\nworkflow_dispatch:\ninputs:\nname:\ndescription: 'Tag to deploy'\nrequired: true\ndefault: 'latest'\n\nenv:\nARTIFACT: oci://ghcr.io/${{github.repository_owner}}/${{github.event.repository.name}}\n\njobs:\nkustomizer:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v3\n- name: Setup kubeconfig\nuses: azure/k8s-set-context@v1\nwith:\nkubeconfig: ${{ secrets.KUBE_CONFIG }}\n- name: Login to GitHub Container Registry\nuses: docker/login-action@v2\nwith:\nregistry: ghcr.io\nusername: ${{ github.actor }}\npassword: ${{ secrets.GHCR_TOKEN }}\n- name: Setup cosign\nuses: sigstore/cosign-installer@main\n- name: Setup kustomizer\nuses: stefanprodan/kustomizer/action@main\n- name: Verify signature\nrun: |\nkustomizer inspect artifact ${ARTIFACT}:${{ github.event.inputs.name }} --verify\n- name: Deploy\nrun: |\nkustomizer apply inventory ${{ github.event.repository.name }} \\\n--artifact ${ARTIFACT}:${{ github.event.inputs.name }} \\\n--prune --wait\n</code></pre>"},{"location":"github-actions/#deploy-to-kubernetes-from-git","title":"Deploy to Kubernetes from Git","text":"<p>Example of applying Kubernetes manifests from a Git repository:</p> <pre><code>name: deploy\non:\npush:\nbranches:\n- 'main'\n\njobs:\nkustomizer:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v3\n- name: Setup kubeconfig\nuses: azure/k8s-set-context@v1\nwith:\nkubeconfig: ${{ secrets.KUBE_CONFIG }}\n- name: Setup kustomizer\nuses: stefanprodan/kustomizer/action@main\n- name: Diff\nrun: |\nkustomizer diff inventory ${{ github.event.repository.name }} \\\n-f ./deploy --prune\n- name: Deploy\nrun: |\nkustomizer apply inventory ${{ github.event.repository.name }} \\\n--source=${{ github.event.repository.html_url }} \\\n--revision=${{ github.sha }} \\\n-f ./deploy --prune --wait\n</code></pre>"},{"location":"install/","title":"Install","text":"<p>The Kustomizer CLI is available as a binary executable for all major platforms, the binaries can be downloaded from GitHub releases. The binaries checksums are signed with cosign and each release comes with a Software Bill of Materials (SBOM) in SPDX format.</p> Install with brewInstall with curlInstall from source <p>Install the latest release on macOS or Linux with:</p> <pre><code>brew install stefanprodan/tap/kustomizer\n</code></pre> <p>Note that the Homebrew formula will setup shell autocompletion for Bash, Fish and Zsh.</p> <p>Install the latest release on macOS or Linux with:</p> <pre><code>curl -s https://kustomizer.dev/install.sh | bash\n</code></pre> <p>To install a specific version:</p> <pre><code>curl -s https://kustomizer.dev/install.sh | bash -s 2.0.0\n</code></pre> <p>The install script downloads the specified version from GitHub and copies the kustomizer binary to <code>/usr/local/bin</code>. If cosign is found in PATH, the script will verify the signature of the release checksums using the public key from stefanprodan.keybase.pub/cosign/kustomizer.pub.</p> <p>Using Go &gt;= 1.17:</p> <pre><code>go install github.com/stefanprodan/kustomizer/cmd/kustomizer@latest\n</code></pre>"},{"location":"install/#shell-autocompletion","title":"Shell autocompletion","text":"<p>Configure your shell to load kustomizer completions:</p> BashFishPowershellZsh <p>To load completion run:</p> <pre><code>. &lt;(kustomizer completion bash)\n</code></pre> <p>To configure your bash shell to load completions for each session add to your bashrc:</p> <pre><code># ~/.bashrc or ~/.bash_profile\ncommand -v kustomizer &gt;/dev/null &amp;&amp; . &lt;(kustomizer completion bash)\n</code></pre> <p>If you have an alias for kustomizer, you can extend shell completion to work with that alias:</p> <pre><code># ~/.bashrc or ~/.bash_profile\nalias kz=kustomizer\ncomplete -F __start_kustomizer kz\n</code></pre> <p>To configure your fish shell to load completions for each session write this script to your completions dir:</p> <pre><code>kustomizer completion fish &gt; ~/.config/fish/completions/kustomizer.fish\n</code></pre> <p>To load completion run:</p> <pre><code>. &lt;(kustomizer completion powershell)\n</code></pre> <p>To configure your powershell shell to load completions for each session add to your powershell profile:</p> <p>Windows:</p> <p><pre><code>cd \"$env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\"\nkustomizer completion &gt;&gt; kustomizer-completion.ps1\n</code></pre> Linux:</p> <pre><code>cd \"${XDG_CONFIG_HOME:-\"$HOME/.config/\"}/powershell/modules\"\nkustomizer completion &gt;&gt; kustomizer-completions.ps1\n</code></pre> <p>To load completion run:</p> <pre><code>. &lt;(kustomizer completion zsh) &amp;&amp; compdef _kustomizer kustomizer\n</code></pre> <p>To configure your zsh shell to load completions for each session add to your zshrc:</p> <pre><code># ~/.zshrc or ~/.profile\ncommand -v kustomizer &gt;/dev/null &amp;&amp; . &lt;(kustomizer completion zsh) &amp;&amp; compdef _kustomizer kustomizer\n</code></pre> <p>or write a cached file in one of the completion directories in your ${fpath}:</p> <pre><code>echo \"${fpath// /\\n}\" | grep -i completion\nkustomizer completion zsh &gt; _kustomizer\n\nmv _kustomizer ~/.oh-my-zsh/completions  # oh-my-zsh\nmv _kustomizer ~/.zprezto/modules/completion/external/src/  # zprezto\n</code></pre>"},{"location":"install/#container-images","title":"Container Images","text":"<p>Signed release images are available at ghcr.io/stefanprodan/kustomizer. The container images are multi-arch (amd64 and arm64) and they are tagged with the version number e.g. <code>ghcr.io/stefanprodan/kustomizer:v2.0.0</code>.</p> <p>Verify the latest image with cosign:</p> <pre><code>cosign verify --key https://stefanprodan.keybase.pub/cosign/kustomizer.pub \\\nghcr.io/stefanprodan/kustomizer:latest\n</code></pre> <p>Pull the image and run kustomizer with docker:</p> <pre><code>docker run ghcr.io/stefanprodan/kustomizer /kustomizer -v\n</code></pre>"},{"location":"install/#configuration","title":"Configuration","text":"<p>In order to change settings such as the server-side apply field manager or the apply order, first create a config file at <code>~/.kustomizer/config</code> with:</p> commandexample output <pre><code>kustomizer config init\n</code></pre> <pre><code>config written to /Users/stefanprodan/.kustomizer/config\n</code></pre> <p>Make adjustments to the config YAML, then validate the config with:</p> commandexample output <pre><code>kustomizer config view\n</code></pre> <pre><code>apiVersion: kustomizer.dev/v1\nkind: Config\napplyOrder:\nfirst:\n- CustomResourceDefinition\n- Namespace\n- ResourceQuota\n- StorageClass\n- ServiceAccount\n- PodSecurityPolicy\n- Role\n- ClusterRole\n- RoleBinding\n- ClusterRoleBinding\n- ConfigMap\n- Secret\n- Service\n- LimitRange\n- PriorityClass\n- Deployment\n- StatefulSet\n- CronJob\n- PodDisruptionBudget\nlast:\n- MutatingWebhookConfiguration\n- ValidatingWebhookConfiguration\nfieldManager:\ngroup: inventory.kustomizer.dev\nname: kustomizer\n</code></pre> <p>If you want to use Kustomizer as a debug tool for Flux, you can set the field manager to match Flux's kustomize-controller with:</p> <pre><code>apiVersion: kustomizer.dev/v1\nkind: Config\nfieldManager:\ngroup: kustomize.toolkit.fluxcd.io\nname: kustomize-controller\n</code></pre>"},{"location":"cmd/kustomizer/","title":"kustomizer","text":""},{"location":"cmd/kustomizer/#kustomizer","title":"kustomizer","text":"<p>A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</p>"},{"location":"cmd/kustomizer/#synopsis","title":"Synopsis","text":"<p>Kustomizer is an OSS tool for building Kubernetes continuous delivery workflows.</p> <p>Distribute Kubernetes configuration as OCI artifacts to container registries:</p> <ul> <li>kustomizer push artifact oci://: -k [-f] [-p] <li>kustomizer tag artifact oci://: <li>kustomizer pull artifact oci://: <li>kustomizer inspect artifact oci://: <p>Build, customize and apply Kubernetes resources:</p> <ul> <li>kustomizer build inventory  [-a ] [-f ] [-p ] -k  <li>kustomizer apply inventory  -n  [-a] [-f] [-p] -k --prune --wait --force <li>kustomizer diff inventory  -n  [-a] [-f] [-p] -k <p>Manage the applied Kubernetes resources:</p> <ul> <li>kustomizer get inventories --namespace  <li>kustomizer inspect inventory  --namespace  <li>kustomizer delete inventory  --namespace"},{"location":"cmd/kustomizer/#options","title":"Options","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n  -h, --help                           help for kustomizer\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer apply   - Apply inventories from remote OCI artifacts, local kustomize overlays and/or Kubernetes YAML manifests.</li> <li>kustomizer build   - Build inventories from remote OCI artifacts, local kustomize overlays and/or Kubernetes YAML manifests.</li> <li>kustomizer completion     - Generates completion scripts for various shells</li> <li>kustomizer config     - Manage kustomizer config files.</li> <li>kustomizer delete     - Delete inventories and their content.</li> <li>kustomizer diff     - Diff prints the differences between two sets of Kubernetes resources.</li> <li>kustomizer get   - Get prints details about one or more inventory.</li> <li>kustomizer inspect   - Inspect artifacts and inventories.</li> <li>kustomizer list     - List artifacts from an OCI repository.</li> <li>kustomizer pull     - Pull artifacts from container registries.</li> <li>kustomizer push     - Push artifacts to container registries.</li> <li>kustomizer tag   - Tag artifacts stored in container registries.</li> </ul>"},{"location":"cmd/kustomizer_apply/","title":"kustomizer apply","text":""},{"location":"cmd/kustomizer_apply/#kustomizer-apply","title":"kustomizer apply","text":"<p>Apply inventories from remote OCI artifacts, local kustomize overlays and/or Kubernetes YAML manifests.</p>"},{"location":"cmd/kustomizer_apply/#options","title":"Options","text":"<pre><code>  -h, --help   help for apply\n</code></pre>"},{"location":"cmd/kustomizer_apply/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_apply/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer apply inventory   - Apply builds the given inventory, then it validates and reconciles the Kubernetes objects using server-side apply.</li> </ul>"},{"location":"cmd/kustomizer_apply_inventory/","title":"kustomizer apply inventory","text":""},{"location":"cmd/kustomizer_apply_inventory/#kustomizer-apply-inventory","title":"kustomizer apply inventory","text":"<p>Apply builds the given inventory, then it validates and reconciles the Kubernetes objects using server-side apply.</p> <pre><code>kustomizer apply inventory [flags]\n</code></pre>"},{"location":"cmd/kustomizer_apply_inventory/#examples","title":"Examples","text":"<pre><code>  kustomizer apply inventory &lt;name&gt; [-a] [-p] [-f] -k --prune --wait --force --source --revision\n\n  # Apply an inventory from remote OCI artifacts\n  kustomizer apply inventory my-app -n apps -a oci://registry/org/repo:latest\n\n  # Apply an inventory using an OCI artifact digest\n  kustomizer apply inventory my-app -n apps -a oci://registry/org/repo@sha256:&lt;digest&gt;\n\n  # Apply an inventory from an encrypted OCI artifact\n  kustomizer apply inventory my-app -n apps -a oci://registry/org/repo:latest --age-identities ./keys/id.txt\n\n  # Apply an inventory from remote OCI artifacts and local patches\n  kustomizer apply inventory my-app -n apps -a oci://registry/org/repo:latest -p ./patches/safe-to-evict.yaml\n\n  # Force apply a local kustomize overlay then wait for all resources to become ready\n  kustomizer apply inventory my-app -n apps -k ./overlays/prod --prune --wait --force\n\n  # Apply Kubernetes YAML manifests from a locally cloned Git repository\n  kustomizer apply inventory my-app -n apps -f ./deploy/manifests --source=\"$(git ls-remote --get-url)\" --revision=\"$(git describe --always)\"\n</code></pre>"},{"location":"cmd/kustomizer_apply_inventory/#options","title":"Options","text":"<pre><code>      --age-identities string   Path to a file containing one or more age identities (private keys generated by age-keygen).\n  -a, --artifact strings        OCI artifact URL in the format 'oci://registry/org/repo:tag' e.g. 'oci://docker.io/stefanprodan/app-deploy:v1.0.0'.\n      --create-namespace        Create the inventory namespace if not present.\n  -f, --filename strings        Path to Kubernetes manifest(s). If a directory is specified, then all manifests in the directory tree will be processed recursively.\n      --force                   Recreate objects that contain immutable fields changes.\n  -h, --help                    help for inventory\n  -k, --kustomize string        Path to a directory that contains a kustomization.yaml.\n  -p, --patch strings           Path to a kustomization file that contains a list of patches.\n      --prune                   Delete stale objects from the cluster.\n      --revision string         The revision identifier.\n      --source string           The URL to the source code.\n      --wait                    Wait for the applied Kubernetes objects to become ready.\n</code></pre>"},{"location":"cmd/kustomizer_apply_inventory/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_apply_inventory/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer apply   - Apply inventories from remote OCI artifacts, local kustomize overlays and/or Kubernetes YAML manifests.</li> </ul>"},{"location":"cmd/kustomizer_build/","title":"kustomizer build","text":""},{"location":"cmd/kustomizer_build/#kustomizer-build","title":"kustomizer build","text":"<p>Build inventories from remote OCI artifacts, local kustomize overlays and/or Kubernetes YAML manifests.</p>"},{"location":"cmd/kustomizer_build/#options","title":"Options","text":"<pre><code>  -h, --help   help for build\n</code></pre>"},{"location":"cmd/kustomizer_build/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_build/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer build inventory   - Build generates an inventory and writes the resulting Kubernetes manifests to stdout.</li> </ul>"},{"location":"cmd/kustomizer_build_inventory/","title":"kustomizer build inventory","text":""},{"location":"cmd/kustomizer_build_inventory/#kustomizer-build-inventory","title":"kustomizer build inventory","text":"<p>Build generates an inventory and writes the resulting Kubernetes manifests to stdout.</p> <pre><code>kustomizer build inventory [flags]\n</code></pre>"},{"location":"cmd/kustomizer_build_inventory/#examples","title":"Examples","text":"<pre><code>  kustomizer build inventory &lt;name&gt; [-a] [-p] [-f] -k\n\n  # Build the inventory from remote OCI artifacts and print the resulting multi-doc YAML\n  kustomizer build inventory my-app -n apps -a oci://registry/org/repo:latest\n\n  # Build the inventory from remote OCI artifacts, apply local patches and print the resulting multi-doc YAML\n  kustomizer build inventory my-app -n apps -a oci://registry/org/repo:latest -p ./patches/safe-to-evict.yaml\n\n  # Build the inventory from local files and print the resulting multi-doc YAML\n  kustomizer build inventory my-app -n apps -f ./deploy/manifests\n\n  # Build the inventory from a local overlay and print the resulting multi-doc YAML\n  kustomizer build inventory my-app -n apps -k ./overlays/prod\n</code></pre>"},{"location":"cmd/kustomizer_build_inventory/#options","title":"Options","text":"<pre><code>      --age-identities string   Path to a file containing one or more age identities (private keys generated by age-keygen).\n  -a, --artifact strings        OCI artifact URL in the format 'oci://registry/org/repo:tag' e.g. 'oci://docker.io/stefanprodan/app-deploy:v1.0.0'.\n  -f, --filename strings        Path to Kubernetes manifest(s). If a directory is specified, then all manifests in the directory tree will be processed recursively.\n  -h, --help                    help for inventory\n  -k, --kustomize string        Path to a directory that contains a kustomization.yaml.\n  -o, --output string           Write manifests to stdout in YAML or JSON format. (default \"yaml\")\n  -p, --patch strings           Path to a kustomization file that contains a list of patches.\n</code></pre>"},{"location":"cmd/kustomizer_build_inventory/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_build_inventory/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer build   - Build inventories from remote OCI artifacts, local kustomize overlays and/or Kubernetes YAML manifests.</li> </ul>"},{"location":"cmd/kustomizer_completion/","title":"kustomizer completion","text":""},{"location":"cmd/kustomizer_completion/#kustomizer-completion","title":"kustomizer completion","text":"<p>Generates completion scripts for various shells</p>"},{"location":"cmd/kustomizer_completion/#synopsis","title":"Synopsis","text":"<p>The completion sub-command generates completion scripts for various shells</p>"},{"location":"cmd/kustomizer_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cmd/kustomizer_completion/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer completion bash   - Generates bash completion scripts</li> <li>kustomizer completion fish   - Generates fish completion scripts</li> <li>kustomizer completion powershell   - Generates powershell completion scripts</li> <li>kustomizer completion zsh     - Generates zsh completion scripts</li> </ul>"},{"location":"cmd/kustomizer_completion_bash/","title":"kustomizer completion bash","text":""},{"location":"cmd/kustomizer_completion_bash/#kustomizer-completion-bash","title":"kustomizer completion bash","text":"<p>Generates bash completion scripts</p> <pre><code>kustomizer completion bash [flags]\n</code></pre>"},{"location":"cmd/kustomizer_completion_bash/#examples","title":"Examples","text":"<pre><code>To load completion run\n\n. &lt;(kustomizer completion bash)\n\nTo configure your bash shell to load completions for each session add to your bashrc\n\n# ~/.bashrc or ~/.profile\ncommand -v kustomizer &gt;/dev/null &amp;&amp; . &lt;(kustomizer completion bash)\n</code></pre>"},{"location":"cmd/kustomizer_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help   help for bash\n</code></pre>"},{"location":"cmd/kustomizer_completion_bash/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer completion     - Generates completion scripts for various shells</li> </ul>"},{"location":"cmd/kustomizer_completion_fish/","title":"kustomizer completion fish","text":""},{"location":"cmd/kustomizer_completion_fish/#kustomizer-completion-fish","title":"kustomizer completion fish","text":"<p>Generates fish completion scripts</p> <pre><code>kustomizer completion fish [flags]\n</code></pre>"},{"location":"cmd/kustomizer_completion_fish/#examples","title":"Examples","text":"<pre><code>To configure your fish shell to load completions for each session write this script to your completions dir:\n\nkustomizer completion fish &gt; ~/.config/fish/completions/kustomizer.fish\n\nSee http://fishshell.com/docs/current/index.html#completion-own for more details\n</code></pre>"},{"location":"cmd/kustomizer_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help   help for fish\n</code></pre>"},{"location":"cmd/kustomizer_completion_fish/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer completion     - Generates completion scripts for various shells</li> </ul>"},{"location":"cmd/kustomizer_completion_powershell/","title":"kustomizer completion powershell","text":""},{"location":"cmd/kustomizer_completion_powershell/#kustomizer-completion-powershell","title":"kustomizer completion powershell","text":"<p>Generates powershell completion scripts</p> <pre><code>kustomizer completion powershell [flags]\n</code></pre>"},{"location":"cmd/kustomizer_completion_powershell/#examples","title":"Examples","text":"<pre><code>To load completion run\n\n. &lt;(kustomizer completion powershell)\n\nTo configure your powershell shell to load completions for each session add to your powershell profile\n\nWindows:\n\ncd \"$env:USERPROFILE\\Documents\\WindowsPowerShell\\Modules\"\nkustomizer completion &gt;&gt; kustomizer-completion.ps1\n\nLinux:\n\ncd \"${XDG_CONFIG_HOME:-\"$HOME/.config/\"}/powershell/modules\"\nkustomizer completion &gt;&gt; kustomizer-completions.ps1\n</code></pre>"},{"location":"cmd/kustomizer_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help   help for powershell\n</code></pre>"},{"location":"cmd/kustomizer_completion_powershell/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer completion     - Generates completion scripts for various shells</li> </ul>"},{"location":"cmd/kustomizer_completion_zsh/","title":"kustomizer completion zsh","text":""},{"location":"cmd/kustomizer_completion_zsh/#kustomizer-completion-zsh","title":"kustomizer completion zsh","text":"<p>Generates zsh completion scripts</p> <pre><code>kustomizer completion zsh [flags]\n</code></pre>"},{"location":"cmd/kustomizer_completion_zsh/#examples","title":"Examples","text":"<pre><code>To load completion run\n\n. &lt;(kustomizer completion zsh) &amp;&amp; compdef _kustomizer kustomizer\n\nTo configure your zsh shell to load completions for each session add to your zshrc\n\n# ~/.zshrc or ~/.profile\ncommand -v kustomizer &gt;/dev/null &amp;&amp; . &lt;(kustomizer completion zsh) &amp;&amp; compdef _kustomizer kustomizer\n\nor write a cached file in one of the completion directories in your ${fpath}:\n\necho \"${fpath// /\\n}\" | grep -i completion\nkustomizer completion zsh &gt; _kustomizer\n\nmv _kustomizer ~/.oh-my-zsh/completions  # oh-my-zsh\nmv _kustomizer ~/.zprezto/modules/completion/external/src/  # zprezto\n</code></pre>"},{"location":"cmd/kustomizer_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help   help for zsh\n</code></pre>"},{"location":"cmd/kustomizer_completion_zsh/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer completion     - Generates completion scripts for various shells</li> </ul>"},{"location":"cmd/kustomizer_config/","title":"kustomizer config","text":""},{"location":"cmd/kustomizer_config/#kustomizer-config","title":"kustomizer config","text":"<p>Manage kustomizer config files.</p>"},{"location":"cmd/kustomizer_config/#options","title":"Options","text":"<pre><code>  -h, --help   help for config\n</code></pre>"},{"location":"cmd/kustomizer_config/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_config/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer config init   - Init writes a config file with default values at '$HOME/.kustomizer/config'.</li> <li>kustomizer config view   - Display the config values from '$HOME/.kustomizer/config'. If no config file is found, the default in-memory values are displayed.</li> </ul>"},{"location":"cmd/kustomizer_config_init/","title":"kustomizer config init","text":""},{"location":"cmd/kustomizer_config_init/#kustomizer-config-init","title":"kustomizer config init","text":"<p>Init writes a config file with default values at '$HOME/.kustomizer/config'.</p> <pre><code>kustomizer config init [flags]\n</code></pre>"},{"location":"cmd/kustomizer_config_init/#options","title":"Options","text":"<pre><code>  -h, --help   help for init\n</code></pre>"},{"location":"cmd/kustomizer_config_init/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_config_init/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer config     - Manage kustomizer config files.</li> </ul>"},{"location":"cmd/kustomizer_config_view/","title":"kustomizer config view","text":""},{"location":"cmd/kustomizer_config_view/#kustomizer-config-view","title":"kustomizer config view","text":"<p>Display the config values from '$HOME/.kustomizer/config'. If no config file is found, the default in-memory values are displayed.</p> <pre><code>kustomizer config view [flags]\n</code></pre>"},{"location":"cmd/kustomizer_config_view/#options","title":"Options","text":"<pre><code>  -h, --help   help for view\n</code></pre>"},{"location":"cmd/kustomizer_config_view/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_config_view/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer config     - Manage kustomizer config files.</li> </ul>"},{"location":"cmd/kustomizer_delete/","title":"kustomizer delete","text":""},{"location":"cmd/kustomizer_delete/#kustomizer-delete","title":"kustomizer delete","text":"<p>Delete inventories and their content.</p>"},{"location":"cmd/kustomizer_delete/#options","title":"Options","text":"<pre><code>  -h, --help   help for delete\n</code></pre>"},{"location":"cmd/kustomizer_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer delete inventory     - Delete the Kubernetes objects in specified inventory including the inventory storage.</li> </ul>"},{"location":"cmd/kustomizer_delete_inventory/","title":"kustomizer delete inventory","text":""},{"location":"cmd/kustomizer_delete_inventory/#kustomizer-delete-inventory","title":"kustomizer delete inventory","text":"<p>Delete the Kubernetes objects in specified inventory including the inventory storage.</p> <pre><code>kustomizer delete inventory [flags]\n</code></pre>"},{"location":"cmd/kustomizer_delete_inventory/#examples","title":"Examples","text":"<pre><code> kustomizer delete inventory &lt;inventory name&gt; -n &lt;inventory namespace&gt;\n\n  # Delete an inventory and its content\n  kustomizer delete inv my-app -n apps\n</code></pre>"},{"location":"cmd/kustomizer_delete_inventory/#options","title":"Options","text":"<pre><code>  -h, --help   help for inventory\n      --wait   Wait for the deleted Kubernetes objects to be terminated. (default true)\n</code></pre>"},{"location":"cmd/kustomizer_delete_inventory/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_delete_inventory/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer delete     - Delete inventories and their content.</li> </ul>"},{"location":"cmd/kustomizer_diff/","title":"kustomizer diff","text":""},{"location":"cmd/kustomizer_diff/#kustomizer-diff","title":"kustomizer diff","text":"<p>Diff prints the differences between two sets of Kubernetes resources.</p>"},{"location":"cmd/kustomizer_diff/#options","title":"Options","text":"<pre><code>  -h, --help   help for diff\n</code></pre>"},{"location":"cmd/kustomizer_diff/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_diff/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer diff artifact   - Diff compares the two artifacts and prints the differences between the Kubernetes resources to stdout.</li> <li>kustomizer diff inventory     - Diff compares the given inventory with the in-cluster one and prints the YAML diff to stdout.</li> </ul>"},{"location":"cmd/kustomizer_diff_artifact/","title":"kustomizer diff artifact","text":""},{"location":"cmd/kustomizer_diff_artifact/#kustomizer-diff-artifact","title":"kustomizer diff artifact","text":"<p>Diff compares the two artifacts and prints the differences between the Kubernetes resources to stdout.</p> <pre><code>kustomizer diff artifact [flags]\n</code></pre>"},{"location":"cmd/kustomizer_diff_artifact/#examples","title":"Examples","text":"<pre><code>  kustomizer diff artifact &lt;oci url1&gt; &lt;oci url2&gt;\n\n  # Diff artifact by tag\n  kustomizer diff artifact oci://registry/org/repo:v1 oci://registry/org/repo:v2\n\n  # Diff artifact by digest\n  kustomizer diff artifact oci://registry/org/repo@sha245:&lt;digest-1&gt; oci://registry/org/repo@sha245:&lt;digest-2&gt;\n</code></pre>"},{"location":"cmd/kustomizer_diff_artifact/#options","title":"Options","text":"<pre><code>      --age-identities string   Path to a file containing one or more age identities (private keys generated by age-keygen).\n  -h, --help                    help for artifact\n</code></pre>"},{"location":"cmd/kustomizer_diff_artifact/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_diff_artifact/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer diff     - Diff prints the differences between two sets of Kubernetes resources.</li> </ul>"},{"location":"cmd/kustomizer_diff_inventory/","title":"kustomizer diff inventory","text":""},{"location":"cmd/kustomizer_diff_inventory/#kustomizer-diff-inventory","title":"kustomizer diff inventory","text":"<p>Diff compares the given inventory with the in-cluster one and prints the YAML diff to stdout.</p> <pre><code>kustomizer diff inventory [flags]\n</code></pre>"},{"location":"cmd/kustomizer_diff_inventory/#examples","title":"Examples","text":"<pre><code>  kustomizer diff inventory &lt;inv name&gt; -n &lt;inv namespace&gt; [-a &lt;oci url&gt;] [-f &lt;dir path&gt;|&lt;file path&gt;] [-p &lt;kustomize patch&gt;] -k &lt;overlay path&gt;\n\n  # Build the inventory from remote OCI artifacts and print the YAML diff\n  kustomizer diff inventory my-app -n apps -a oci://registry/org/repo:latest\n\n  # Build the inventory from remote OCI artifacts, apply local patches and print the YAML diff\n  kustomizer diff inventory my-app -n apps -a oci://registry/org/repo:latest -p ./patches/safe-to-evict.yaml\n\n  # Build the inventory from local files and print the YAML diff\n  kustomizer diff inventory my-app -n apps -f ./deploy/manifests\n\n  # Build the inventory from a local overlay and print the YAML diff\n  kustomizer diff inventory my-app -n apps -k ./overlays/prod\n</code></pre>"},{"location":"cmd/kustomizer_diff_inventory/#options","title":"Options","text":"<pre><code>      --age-identities string   Path to a file containing one or more age identities (private keys generated by age-keygen).\n  -a, --artifact strings        OCI artifact URL in the format 'oci://registry/org/repo:tag' e.g. 'oci://docker.io/stefanprodan/app-deploy:v1.0.0'.\n  -f, --filename strings        Path to Kubernetes manifest(s). If a directory is specified, then all manifests in the directory tree will be processed recursively.\n  -h, --help                    help for inventory\n  -k, --kustomize string        Path to a directory that contains a kustomization.yaml.\n  -p, --patch strings           Path to a kustomization file that contains a list of patches.\n      --prune                   Delete stale objects from the cluster.\n</code></pre>"},{"location":"cmd/kustomizer_diff_inventory/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_diff_inventory/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer diff     - Diff prints the differences between two sets of Kubernetes resources.</li> </ul>"},{"location":"cmd/kustomizer_get/","title":"kustomizer get","text":""},{"location":"cmd/kustomizer_get/#kustomizer-get","title":"kustomizer get","text":"<p>Get prints details about one or more inventory.</p>"},{"location":"cmd/kustomizer_get/#options","title":"Options","text":"<pre><code>  -h, --help   help for get\n</code></pre>"},{"location":"cmd/kustomizer_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_get/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer get inventory   - Get prints a table with the inventories in the given namespace.</li> </ul>"},{"location":"cmd/kustomizer_get_inventory/","title":"kustomizer get inventory","text":""},{"location":"cmd/kustomizer_get_inventory/#kustomizer-get-inventory","title":"kustomizer get inventory","text":"<p>Get prints a table with the inventories in the given namespace.</p> <pre><code>kustomizer get inventory [flags]\n</code></pre>"},{"location":"cmd/kustomizer_get_inventory/#examples","title":"Examples","text":"<pre><code> kustomizer get inventories -n &lt;namespace&gt;\n\n  # Get an inventory in the specified namespace\n  kustomizer get inventory my-app -n apps\n\n  # Get all inventories in the specified namespace\n  kustomizer get inventories -n apps\n</code></pre>"},{"location":"cmd/kustomizer_get_inventory/#options","title":"Options","text":"<pre><code>      --all-namespaces   list the requested object(s) across all namespaces.\n  -h, --help             help for inventory\n</code></pre>"},{"location":"cmd/kustomizer_get_inventory/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_get_inventory/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer get   - Get prints details about one or more inventory.</li> </ul>"},{"location":"cmd/kustomizer_inspect/","title":"kustomizer inspect","text":""},{"location":"cmd/kustomizer_inspect/#kustomizer-inspect","title":"kustomizer inspect","text":"<p>Inspect artifacts and inventories.</p>"},{"location":"cmd/kustomizer_inspect/#options","title":"Options","text":"<pre><code>  -h, --help   help for inspect\n</code></pre>"},{"location":"cmd/kustomizer_inspect/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_inspect/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer inspect artifact     - Inspect downloads the specified OCI artifact and prints a report of its content.</li> <li>kustomizer inspect inventory   - Inspect prints the content of the given inventory.</li> </ul>"},{"location":"cmd/kustomizer_inspect_artifact/","title":"kustomizer inspect artifact","text":""},{"location":"cmd/kustomizer_inspect_artifact/#kustomizer-inspect-artifact","title":"kustomizer inspect artifact","text":"<p>Inspect downloads the specified OCI artifact and prints a report of its content.</p>"},{"location":"cmd/kustomizer_inspect_artifact/#synopsis","title":"Synopsis","text":"<p>The inspect command downloads the specified OCI artifact and prints the artifact metadata, lists the Kubernetes objects and the container image references. For private registries, the inspect command uses the credentials from '~/.docker/config.json'.</p> <pre><code>kustomizer inspect artifact [flags]\n</code></pre>"},{"location":"cmd/kustomizer_inspect_artifact/#examples","title":"Examples","text":"<pre><code> kustomizer inspect artifact &lt;oci url&gt;\n\n  # Inspect an OCI artifact\n  kustomizer inspect artifact oci://docker.io/user/repo:latest\n\n  # Verify artifact with cosign public key\n  kustomizer inspect artifact oci://docker.io/user/repo:v1.0.0 --verify --cosign-key ./keys/cosign.pub\n\n  # Verify artifact signed with cosign and GitHub OIDC\n  kustomizer inspect artifact oci://docker.io/user/repo:v1.0.0 --verify\n\n  # List only the container images references\n  kustomizer inspect artifact oci://docker.io/user/repo:v1.0 --container-images\n</code></pre>"},{"location":"cmd/kustomizer_inspect_artifact/#options","title":"Options","text":"<pre><code>      --age-identities string   Path to a file containing one or more age identities (private keys generated by age-keygen).\n      --container-images        List only the container images referenced in the Kubernetes manifests.\n      --cosign-key string       Path to the consign public key file, KMS URI or Kubernetes Secret. When not specified, cosign will try to verify the signature using Rekor.\n  -h, --help                    help for artifact\n      --verify                  Verify the artifact signature with cosign.\n</code></pre>"},{"location":"cmd/kustomizer_inspect_artifact/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_inspect_artifact/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer inspect   - Inspect artifacts and inventories.</li> </ul>"},{"location":"cmd/kustomizer_inspect_inventory/","title":"kustomizer inspect inventory","text":""},{"location":"cmd/kustomizer_inspect_inventory/#kustomizer-inspect-inventory","title":"kustomizer inspect inventory","text":"<p>Inspect prints the content of the given inventory.</p> <pre><code>kustomizer inspect inventory [flags]\n</code></pre>"},{"location":"cmd/kustomizer_inspect_inventory/#examples","title":"Examples","text":"<pre><code> kustomizer inspect inventory &lt;name&gt; -n &lt;namespace&gt;\n\n  # Get an inventory and list its content\n  kustomizer inspect inv my-app -n apps\n</code></pre>"},{"location":"cmd/kustomizer_inspect_inventory/#options","title":"Options","text":"<pre><code>  -h, --help   help for inventory\n</code></pre>"},{"location":"cmd/kustomizer_inspect_inventory/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_inspect_inventory/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer inspect   - Inspect artifacts and inventories.</li> </ul>"},{"location":"cmd/kustomizer_list/","title":"kustomizer list","text":""},{"location":"cmd/kustomizer_list/#kustomizer-list","title":"kustomizer list","text":"<p>List artifacts from an OCI repository.</p>"},{"location":"cmd/kustomizer_list/#options","title":"Options","text":"<pre><code>  -h, --help   help for list\n</code></pre>"},{"location":"cmd/kustomizer_list/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_list/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer list artifact   - List the versions of an OCI artifact.</li> </ul>"},{"location":"cmd/kustomizer_list_artifact/","title":"kustomizer list artifact","text":""},{"location":"cmd/kustomizer_list_artifact/#kustomizer-list-artifact","title":"kustomizer list artifact","text":"<p>List the versions of an OCI artifact.</p>"},{"location":"cmd/kustomizer_list_artifact/#synopsis","title":"Synopsis","text":"<p>The list command fetches the tags of the specified OCI artifact from its image repository. If a semantic version condition is specified, the tags are filtered and ordered by semver. For private registries, the list command uses the credentials from '~/.docker/config.json'.</p> <pre><code>kustomizer list artifact [flags]\n</code></pre>"},{"location":"cmd/kustomizer_list_artifact/#examples","title":"Examples","text":"<pre><code>  kustomizer list artifacts &lt;oci repository url&gt; --semver &lt;condition&gt;\n\n  # List all versions ordered by semver\n  kustomizer list artifacts oci://docker.io/user/repo --semver=\"*\"\n\n  # List all versions including prerelease ordered by semver\n  kustomizer list artifacts oci://docker.io/user/repo --semver=\"&gt;0.0.0-0\"\n\n  # List all versions in the 1.0 range\n  kustomizer list artifacts oci://docker.io/user/repo --semver=\"~1.0\"\n\n  # List all versions in the 1.0 range including prerelease\n  kustomizer list artifacts oci://docker.io/user/repo --semver=\"~1.0-0\"\n</code></pre>"},{"location":"cmd/kustomizer_list_artifact/#options","title":"Options","text":"<pre><code>  -h, --help            help for artifact\n      --semver string   Filter the results based on a semantic version constraint e.g. '1.x'.\n</code></pre>"},{"location":"cmd/kustomizer_list_artifact/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_list_artifact/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer list     - List artifacts from an OCI repository.</li> </ul>"},{"location":"cmd/kustomizer_pull/","title":"kustomizer pull","text":""},{"location":"cmd/kustomizer_pull/#kustomizer-pull","title":"kustomizer pull","text":"<p>Pull artifacts from container registries.</p>"},{"location":"cmd/kustomizer_pull/#options","title":"Options","text":"<pre><code>  -h, --help   help for pull\n</code></pre>"},{"location":"cmd/kustomizer_pull/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_pull/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer pull artifact   - Pull downloads Kubernetes manifests from a container registry.</li> </ul>"},{"location":"cmd/kustomizer_pull_artifact/","title":"kustomizer pull artifact","text":""},{"location":"cmd/kustomizer_pull_artifact/#kustomizer-pull-artifact","title":"kustomizer pull artifact","text":"<p>Pull downloads Kubernetes manifests from a container registry.</p>"},{"location":"cmd/kustomizer_pull_artifact/#synopsis","title":"Synopsis","text":"<p>The pull command downloads the specified OCI artifact and writes the Kubernetes manifests to stdout. For private registries, the pull command uses the credentials from '~/.docker/config.json'.</p> <pre><code>kustomizer pull artifact [flags]\n</code></pre>"},{"location":"cmd/kustomizer_pull_artifact/#examples","title":"Examples","text":"<pre><code>  kustomizer pull artifact &lt;oci url&gt;\n\n  # Pull Kubernetes manifests from an OCI artifact hosted on Docker Hub\n  kustomizer pull artifact oci://docker.io/user/repo:v1.0.0 &gt; manifests.yaml\n\n  # Pull an OCI artifact using the digest and write the Kubernetes manifests to stdout\n  kustomizer pull artifact oci://docker.io/user/repo@sha256:&lt;digest&gt;\n\n  # Pull the latest artifact from a local registry\n  kustomizer pull artifact oci://localhost:5000/repo\n\n  # Pull and verify artifact with cosign\n  kustomizer pull artifact oci://docker.io/user/repo:v1.0.0 --verify --cosign-key ./keys/cosign.pub\n\n  # Pull encrypted artifact\n  kustomizer pull artifact oci://docker.io/user/repo:v1.0.0 --age-identities ./keys/id.txt\n</code></pre>"},{"location":"cmd/kustomizer_pull_artifact/#options","title":"Options","text":"<pre><code>      --age-identities string   Path to a file containing one or more age identities (private keys generated by age-keygen).\n      --cosign-key string       Path to the consign public key file, KMS URI or Kubernetes Secret. When not specified, cosign will try to verify the signature using Rekor.\n  -h, --help                    help for artifact\n      --verify                  Verify the artifact signature with cosign.\n</code></pre>"},{"location":"cmd/kustomizer_pull_artifact/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_pull_artifact/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer pull     - Pull artifacts from container registries.</li> </ul>"},{"location":"cmd/kustomizer_push/","title":"kustomizer push","text":""},{"location":"cmd/kustomizer_push/#kustomizer-push","title":"kustomizer push","text":"<p>Push artifacts to container registries.</p>"},{"location":"cmd/kustomizer_push/#options","title":"Options","text":"<pre><code>  -h, --help   help for push\n</code></pre>"},{"location":"cmd/kustomizer_push/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_push/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer push artifact   - Push uploads Kubernetes manifests to a container registry.</li> </ul>"},{"location":"cmd/kustomizer_push_artifact/","title":"kustomizer push artifact","text":""},{"location":"cmd/kustomizer_push_artifact/#kustomizer-push-artifact","title":"kustomizer push artifact","text":"<p>Push uploads Kubernetes manifests to a container registry.</p>"},{"location":"cmd/kustomizer_push_artifact/#synopsis","title":"Synopsis","text":"<p>The push command scans the given path for Kubernetes manifests or Kustomize overlays, builds the manifests into a multi-doc YAML, packages the YAML file into an OCI artifact and pushes the image to the container registry. The push command uses the credentials from '~/.docker/config.json'.</p> <pre><code>kustomizer push artifact [flags]\n</code></pre>"},{"location":"cmd/kustomizer_push_artifact/#examples","title":"Examples","text":"<pre><code>  kustomizer push artifact &lt;oci url&gt; -k &lt;overlay path&gt; [-f &lt;dir path&gt;|&lt;file path&gt;]\n\n  # Build Kubernetes plain manifests and push the resulting multi-doc YAML to Docker Hub\n  kustomizer push artifact oci://docker.io/user/repo:$(git rev-parse --short HEAD) \\\n    -f ./deploy/manifests \\\n    --source=\"$(git config --get remote.origin.url)\" \\\n    --revision=\"$(git branch --show-current)/$(git rev-parse HEAD)\"\n\n  # Build a Kustomize overlay and push the resulting multi-doc YAML to GitHub Container Registry\n  kustomizer push artifact oci://ghcr.io/user/repo:$(git tag --points-at HEAD) \\\n    --kustomize=\"./deploy/production\" \\\n    --source=\"$(git config --get remote.origin.url)\" \\\n    --revision=\"$(git tag --points-at HEAD)/$(git rev-parse HEAD)\"\n\n  # Push to a local registry\n  kustomizer push artifact oci://localhost:5000/repo:latest -f ./deploy/manifests \n\n  # Push and sign artifact with cosign\n  export COSIGN_PASSWORD=\"&lt;KEY-PASS&gt;\"\n  kustomizer push artifact oci://docker.io/user/repo:v1.0.0 -f ./deploy/manifests --sign --cosign-key ./keys/cosign.key\n\n  # Push and sign artifact with cosign and GitHub OIDC (GH Actions)\n  kustomizer push artifact oci://docker.io/user/repo:v1.0.0 -f ./deploy/manifests --sign\n\n  # Push encrypted artifact\n  kustomizer push artifact oci://docker.io/user/repo:v1.0.0 -f ./deploy/manifests --age-recipients ./keys/pub.txt \n</code></pre>"},{"location":"cmd/kustomizer_push_artifact/#options","title":"Options","text":"<pre><code>      --age-recipients string   Path to a file containing one or more age recipients (public keys generated by age-keygen).\n      --cosign-key string       Path to the consign private key file, KMS URI or Kubernetes Secret. When not specified, cosign will try to producing an identity token from the environment (GH Actions or GCP).\n  -f, --filename strings        Path to Kubernetes manifest(s). If a directory is specified, then all manifests in the directory tree will be processed recursively.\n  -h, --help                    help for artifact\n  -k, --kustomize string        Path to a directory that contains a kustomization.yaml.\n  -p, --patch strings           Path to a kustomization file that contains a list of patches.\n      --revision string         the source revision in the format '&lt;branch|tag&gt;/&lt;commit-sha&gt;'\n      --sign                    Sign the artifact with cosign.\n      --source string           the source address, e.g. the Git URL\n</code></pre>"},{"location":"cmd/kustomizer_push_artifact/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_push_artifact/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer push     - Push artifacts to container registries.</li> </ul>"},{"location":"cmd/kustomizer_tag/","title":"kustomizer tag","text":""},{"location":"cmd/kustomizer_tag/#kustomizer-tag","title":"kustomizer tag","text":"<p>Tag artifacts stored in container registries.</p>"},{"location":"cmd/kustomizer_tag/#options","title":"Options","text":"<pre><code>  -h, --help   help for tag\n</code></pre>"},{"location":"cmd/kustomizer_tag/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_tag/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer   - A command line utility to publish, fetch, customize, validate, and apply Kubernetes configuration.</li> <li>kustomizer tag artifact     - Tag adds a tag for the specified OCI artifact.</li> </ul>"},{"location":"cmd/kustomizer_tag_artifact/","title":"kustomizer tag artifact","text":""},{"location":"cmd/kustomizer_tag_artifact/#kustomizer-tag-artifact","title":"kustomizer tag artifact","text":"<p>Tag adds a tag for the specified OCI artifact.</p>"},{"location":"cmd/kustomizer_tag_artifact/#synopsis","title":"Synopsis","text":"<p>The tag command tags an existing artifact on the remote container registry. This command uses the credentials from '~/.docker/config.json'.</p> <pre><code>kustomizer tag artifact [flags]\n</code></pre>"},{"location":"cmd/kustomizer_tag_artifact/#examples","title":"Examples","text":"<pre><code>  kustomizer tag artifact &lt;oci url&gt; &lt;tag&gt;\n\n  # Tag an OCI artifact as latest\n  kustomizer tag artifact oci://docker.io/user/repo:v1.0.0 latest\n</code></pre>"},{"location":"cmd/kustomizer_tag_artifact/#options","title":"Options","text":"<pre><code>  -h, --help   help for artifact\n</code></pre>"},{"location":"cmd/kustomizer_tag_artifact/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --as string                      Username to impersonate for the operation. User could be a regular user or a service account in a namespace.\n      --as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --as-uid string                  UID to impersonate for the operation.\n      --cache-dir string               Default cache directory (default \"/home/runner/.kube/cache\")\n      --certificate-authority string   Path to a cert file for the certificate authority\n      --client-certificate string      Path to a client certificate file for TLS\n      --client-key string              Path to a client key file for TLS\n      --cluster string                 The name of the kubeconfig cluster to use\n      --context string                 The name of the kubeconfig context to use\n      --insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string              Path to the kubeconfig file to use for CLI requests.\n  -n, --namespace string               The inventory namespace. (default \"default\")\n  -s, --server string                  The address and port of the Kubernetes API server\n      --timeout duration               The length of time to wait before giving up on the current operation. (default 1m0s)\n      --tls-server-name string         Server name to use for server certificate validation. If it is not provided, the hostname used to contact the server is used\n      --token string                   Bearer token for authentication to the API server\n      --user string                    The name of the kubeconfig user to use\n</code></pre>"},{"location":"cmd/kustomizer_tag_artifact/#see-also","title":"SEE ALSO","text":"<ul> <li>kustomizer tag   - Tag artifacts stored in container registries.</li> </ul>"},{"location":"guides/artifacts-encryption/","title":"Encryption at rest with Kustomizer and Age","text":"<p>Kustomizer has builtin support for encrypting and decrypting Kubernetes configuration (packaged as OCI artifacts) using Actually Good Encryption (age) asymmetric keys. Age is a modern and secure encryption tool  with small explicit keys that is a viable alternative to PGP.</p> <p>This guide shows you how to securely distribute sensitive Kubernetes configuration to trusted consumers. When publishing OCI artifacts to a container registry, you can opt to encrypt the artifacts content using your consumers public keys.</p>"},{"location":"guides/artifacts-encryption/#before-you-begin","title":"Before you begin","text":"<ul> <li>Install the Kustomizer CLI by the following instructions in the Installation guide.</li> <li>Install the age key generator CLI e.g. <code>brew install age</code>.</li> </ul>"},{"location":"guides/artifacts-encryption/#key-management","title":"Key management","text":"<p>Assuming you want to publish sensitive Kubernetes configuration that can be accessed only by a set of trusted users, first you'll need to acquire their public keys.</p>"},{"location":"guides/artifacts-encryption/#generate-key-pairs","title":"Generate key pairs","text":"<p>Generate a X25519 key pair using age keygen CLI:</p> <pre><code>age-keygen -o id_age\n</code></pre> <p>Extract the public key to a separate file:</p> <pre><code>age-keygen -y id_age &gt; id_age.pub\n</code></pre>"},{"location":"guides/artifacts-encryption/#create-the-recipients-file","title":"Create the recipients file","text":"<p>Collect the public keys from your users and save them in a file (one key per line):</p> <pre><code>touch recipients.txt\ncat user1/id_age.pub &gt;&gt; recipients.txt\ncat user2/id_age.pub &gt;&gt; recipients.txt\n</code></pre> <p>For testing purposes, add your own public key to the recipients file:</p> <pre><code>cat id_age.pub &gt;&gt; recipients.txt\n</code></pre>"},{"location":"guides/artifacts-encryption/#publish-encrypted-artifacts","title":"Publish encrypted artifacts","text":"<p>To encrypt Kubernetes configuration with your users' public keys, you can point Kustomizer  at the recipients file when pushing artifacts to a container registry:</p> <pre><code>kustomizer push artifact oci://ghcr.io/my-org/my-app:1.0.0 \\\n-k ./examples/demo-app \\\n--age-recipients ./recipients.txt\n</code></pre> <p>Now if you try to inspect the artifact, Kustomizer will fail to access the artifact content:</p> <pre><code>$ kustomizer inspect artifact oci://ghcr.io/my-org/my-app:1.0.0\n\u2717 pulling ghcr.io/my-org/my-app:1.0.0 failed: encrypted artifact, you need to supply a private key for decryption\n</code></pre>"},{"location":"guides/artifacts-encryption/#consume-encrypted-artifacts","title":"Consume encrypted artifacts","text":"<p>To make use of encrypted artifacts, you'll need to point Kustomizer to a local file with one or more private keys (age identities).</p> <p>To inspect an artifact encrypted with your public key:</p> <pre><code>$ kustomizer inspect artifact oci://ghcr.io/my-org/my-app:1.0.0 \\\n--age-identities ./id_age Artifact: oci://ghcr.io/my-org/my-app@sha256:1801d42d5459e81119dad543a7f1080ed2aadc92dcbb7c9dabf282692d6bf29d\nBuiltBy: kustomizer/v2.0.0\nCreatedAt: 2021-12-29T08:35:40Z\nEncryptedWith: age-encryption.org/v1\nChecksum: 5b8c45af6951e977581122b7848b490f25b43ffd44ed7a82fd574eff6aac06be\nResources:\n- Namespace/kustomizer-demo-app\n- ConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\n- Service/kustomizer-demo-app/backend\n- Service/kustomizer-demo-app/cache\n- Service/kustomizer-demo-app/frontend\n- Deployment/kustomizer-demo-app/backend\n  - ghcr.io/stefanprodan/podinfo:6.0.0\n- Deployment/kustomizer-demo-app/cache\n  - public.ecr.aws/docker/library/redis:6.2.0\n- Deployment/kustomizer-demo-app/frontend\n  - ghcr.io/stefanprodan/podinfo:6.0.0\n- HorizontalPodAutoscaler/kustomizer-demo-app/backend\n- HorizontalPodAutoscaler/kustomizer-demo-app/frontend\n</code></pre> <p>All Kustomizer commands that pull artifacts from container registries expose the  <code>--age-identities</code> flag, e.g.:</p> <pre><code>kustomizer apply inventory sensitive-app --wait --prune \\\n--artifact oci://ghcr.io/my-org/app-frontend:1.0.0 \\\n--artifact oci://ghcr.io/my-org/app-backend:1.0.0 \\\n--age-identities ./id_age\n</code></pre>"},{"location":"guides/deploy-from-git/","title":"Deploy applications from Git with Kustomizer","text":"<p>This guide shows you how to deploy a sample application to a Kubernetes cluster.</p> <p>You'll be using a sample app composed of two podinfo instances called <code>frontend</code> and <code>backend</code>, and a redis instance called <code>cache</code>. The application's Kustomize overlay is located at examples/demo-app.</p>"},{"location":"guides/deploy-from-git/#before-you-begin","title":"Before you begin","text":"<ul> <li>Install the Kustomizer CLI by the following instructions in the Installation guide.</li> <li>Have a Kubernetes cluster version 1.20 or newer.</li> </ul> <p>Kubernetes authentication</p> <p>To connect to Kubernetes API, Kustomizer uses the current context from <code>~/.kube/config</code>. You can set a different context with <code>--context=&lt;your context&gt;</code>. You can also specify a different kubeconfig with <code>--kubeconfig</code> or with the <code>KUBECONFIG</code> env var.</p>"},{"location":"guides/deploy-from-git/#manual-deployment","title":"Manual deployment","text":""},{"location":"guides/deploy-from-git/#clone-the-app-repository","title":"Clone the app repository","text":"<p>Clone the Kustomizer Git repository locally:</p> <pre><code>git clone https://github.com/stefanprodan/kustomizer\ncd kustomizer\n</code></pre>"},{"location":"guides/deploy-from-git/#build-the-app-config","title":"Build the app config","text":"<p>Build the demo application to see its Kubernetes configuration:</p> <pre><code>kustomizer build inventory demo-app -k ./examples/demo-app -o yaml\n</code></pre> <p>You can validate the build command output with static analysis tools such as kubeval or kubeconform:</p> <pre><code>$ kustomizer build inventory demo-app -k ./examples/demo-app | kubeval\nPASS - stdin contains a valid Namespace (kustomizer-demo-app)\nPASS - stdin contains a valid ConfigMap (kustomizer-demo-app.redis-config-bd2fcfgt6k)\nPASS - stdin contains a valid Service (kustomizer-demo-app.backend)\nPASS - stdin contains a valid Service (kustomizer-demo-app.cache)\nPASS - stdin contains a valid Service (kustomizer-demo-app.frontend)\nPASS - stdin contains a valid Deployment (kustomizer-demo-app.backend)\nPASS - stdin contains a valid Deployment (kustomizer-demo-app.cache)\nPASS - stdin contains a valid Deployment (kustomizer-demo-app.frontend)\nPASS - stdin contains a valid HorizontalPodAutoscaler (kustomizer-demo-app.backend)\nPASS - stdin contains a valid HorizontalPodAutoscaler (kustomizer-demo-app.frontend)\n</code></pre>"},{"location":"guides/deploy-from-git/#install-the-app","title":"Install the app","text":"<p>Install the demo application by applying the local overlay on the cluster:</p> <pre><code>$ kustomizer apply inventory demo-app -k ./examples/demo-app --prune --wait \\\n--source=\"$(git ls-remote --get-url)\" \\\n--revision=\"$(git describe --always)\"\nbuilding inventory...\napplying 10 manifest(s)...\nNamespace/kustomizer-demo-app created\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k created\nService/kustomizer-demo-app/backend created\nService/kustomizer-demo-app/cache created\nService/kustomizer-demo-app/frontend created\nDeployment/kustomizer-demo-app/backend created\nDeployment/kustomizer-demo-app/cache created\nDeployment/kustomizer-demo-app/frontend created\nHorizontalPodAutoscaler/kustomizer-demo-app/backend created\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend created\nwaiting for resources to become ready...\nall resources are ready\n</code></pre> <p>Kustomizer builds the overlay, validates the resulting resources against the Kubernetes API, applies the resources with server-side apply, and finally waits for the workloads to be rolled out.</p> <p>Apply from other sources</p> <p>Besides kustomize overlays, you can apply plain Kubernetes manifests using the <code>-f</code> flag:</p> <pre><code>kustomizer apply inventory demo-app \\\n-f ./path/to/dir/ \\\n-f ./path/to/manifest.yaml\n</code></pre> <p>An alternative to local files, is to apply Kubernetes configs from container registries using the <code>--artifact</code> flag:</p> <pre><code>kustomizer apply inventory demo-app \\\n--artifact oci://ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0\n</code></pre> <p>For more details see <code>kustomizer apply inventory --help</code>.</p>"},{"location":"guides/deploy-from-git/#list-and-inspect-the-app-config","title":"List and inspect the app config","text":"<p>After applying the resources, Kustomizer creates an inventory. You can list all inventories in a specific namespace with:</p> <pre><code>$ kustomizer get inventories -n default\nNAME        ENTRIES SOURCE                                          REVISION    LAST APPLIED         \ndemo-app    10      https://github.com/stefanprodan/kustomizer.git  6aca8c2     2021-12-22T09:15:22Z\n</code></pre> <p>You can view the Kubernetes objects in an inventory with:</p> <pre><code>$ kustomizer inspect inventory demo-app\nInventory: default/demo-app\nLastAppliedAt: 2021-12-22T09:15:22Z\nSource: https://github.com/stefanprodan/kustomizer.git\nRevision: 6aca8c2\nResources:\n- Namespace/kustomizer-demo-app\n- ConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\n- Service/kustomizer-demo-app/backend\n- Service/kustomizer-demo-app/cache\n- Service/kustomizer-demo-app/frontend\n- Deployment/kustomizer-demo-app/backend\n- Deployment/kustomizer-demo-app/cache\n- Deployment/kustomizer-demo-app/frontend\n- HorizontalPodAutoscaler/kustomizer-demo-app/backend\n- HorizontalPodAutoscaler/kustomizer-demo-app/frontend\n</code></pre> <p>The inventory records are used to track which objects are subject to garbage collection. The inventory is persistent on the cluster as a ConfigMap.</p>"},{"location":"guides/deploy-from-git/#diff-the-app-config-changes","title":"Diff the app config changes","text":"<p>Delete the frontend workload and change the Redis version to <code>6.2.1</code> by editing the <code>./examples/demo-app/kustomization.yaml</code> file.</p> <p>If you have yq installed, run:</p> <pre><code>yq eval 'del(.resources[0])' -i ./examples/demo-app/kustomization.yaml\nyq eval '.images[1].newTag=\"6.2.1\"' -i ./examples/demo-app/kustomization.yaml\n</code></pre> <p>Preview the changes using the diff command:</p> <pre><code>$ kustomizer diff inventory demo-app -k ./examples/demo-app --prune\n\u25ba Deployment/kustomizer-demo-app/cache drifted\n@@ -5,7 +5,7 @@\n     deployment.kubernetes.io/revision: \"1\"\n     env: demo\n   creationTimestamp: \"2021-12-22T09:47:37Z\"\n-  generation: 1\n+  generation: 2\n   labels:\n     app.kubernetes.io/instance: webapp\n     inventory.kustomizer.dev/name: demo-app\n@@ -36,7 +36,7 @@\n       - command:\n         - redis-server\n         - /redis-master/redis.conf\n-        image: public.ecr.aws/docker/library/redis:6.2.0\n+        image: public.ecr.aws/docker/library/redis:6.2.1\n         imagePullPolicy: IfNotPresent\n         livenessProbe:\n           failureThreshold: 3\n\u25ba Service/kustomizer-demo-app/frontend deleted\n\u25ba Deployment/kustomizer-demo-app/frontend deleted\n\u25ba HorizontalPodAutoscaler/kustomizer-demo-app/frontend deleted\n</code></pre> <p>Note that when diffing Kubernetes secrets, Kustomizer diff masks the secret values in the output.</p>"},{"location":"guides/deploy-from-git/#update-the-app","title":"Update the app","text":"<p>Rerun the apply command to update the demo application:</p> <pre><code>$ kustomizer apply inventory demo-app -k ./examples/demo-app --prune --wait \\\n--source=\"$(git ls-remote --get-url)\" \\\n--revision=\"$(git describe --dirty --always)\"\nbuilding inventory...\napplying 7 manifest(s)...\nNamespace/kustomizer-demo-app unchanged\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k unchanged\nService/kustomizer-demo-app/backend unchanged\nService/kustomizer-demo-app/cache unchanged\nDeployment/kustomizer-demo-app/backend unchanged\nDeployment/kustomizer-demo-app/cache configured\nHorizontalPodAutoscaler/kustomizer-demo-app/backend unchanged\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend deleted\nDeployment/kustomizer-demo-app/frontend deleted\nService/kustomizer-demo-app/frontend deleted\nwaiting for resources to become ready...\nall resources are ready\n</code></pre> <p>After applying the resources, Kustomizer removes the Kubernetes objects that are not present in the current inventory. Kustomizer garbage collector deletes the namespaced objects first then it removes the non-namspaced ones.</p>"},{"location":"guides/deploy-from-git/#delete-the-app","title":"Delete the app","text":"<p>Delete all the Kubernetes resources belonging to an inventory including the inventory storage:</p> <pre><code>$ kustomizer delete inventory demo-app --wait\nretrieving inventory...\ndeleting 7 manifest(s)...\nHorizontalPodAutoscaler/kustomizer-demo-app/backend deleted\nDeployment/kustomizer-demo-app/cache deleted\nDeployment/kustomizer-demo-app/backend deleted\nService/kustomizer-demo-app/cache deleted\nService/kustomizer-demo-app/backend deleted\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k deleted\nNamespace/kustomizer-demo-app deleted\nConfigMap/default/demo-app deleted\nwaiting for resources to be terminated...\nall resources have been deleted\n</code></pre>"},{"location":"guides/deploy-from-git/#automated-deployment","title":"Automated deployment","text":"<p>You can automate the deployment process by running Kustomizer in CI.</p> <p>Here is an example of a GitHub Actions workflow that deploys the app every time there is a change to the Kubernetes configuration:</p> <pre><code>name: deploy\non:\npush:\nbranches:\n- 'main'\npaths:\n- 'examples/demo-app/**'\n\njobs:\nkustomizer:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v2\n- name: Setup kubeconfig\nuses: azure/k8s-set-context@v1\nwith:\nkubeconfig: ${{ secrets.KUBE_CONFIG }}\n- name: Setup kustomizer\nuses: stefanprodan/kustomizer/action@main\n- name: Diff\ncontinue-on-error: true\nrun: |\nkustomizer diff inventory ${{ github.event.repository.name }} \\\n-k ./examples/demo-app --prune\n- name: Deploy\nrun: |\nkustomizer apply inventory ${{ github.event.repository.name }} \\\n--source=${{ github.event.repository.html_url }} \\\n--revision=${{ github.sha }} \\\n-k ./examples/demo-app --prune --wait\n</code></pre> <p>For more details on how to use Kustomizer within GitHub workflows, please see the GitHub Actions documentation.</p>"},{"location":"guides/fluxcd/","title":"Continuous deployment with Kustomizer and Flux","text":"<p>This guide shows you how to continuously deploy applications to Kubernetes clusters with Flux using OCI artifacts produced by Kustomizer.</p> <p>This guide offers a better alternative to deploying applications with GitHub CI (as showcased in the Deploy from Git guide). Instead of connecting to each Kubernetes cluster from GitHub Actions, we'll use CI for pushing OCI artifacts to a container registry, and from there, the Kubernetes clusters (running Flux) will drive the app deployment themselves. One major advantage to this approach, is that you no longer have to deal with securing the access from CI to your production systems.</p>"},{"location":"guides/fluxcd/#before-you-begin","title":"Before you begin","text":"<ul> <li>Install Kustomizer and the Flux CLI.</li> <li>Have a Kubernetes cluster version 1.20 or newer.</li> <li>Have a GitHub account.</li> </ul> <p>Install with Homebrew</p> <pre><code>brew install stefanprodan/tap/kustomizer fluxcd/tap/flux\n</code></pre>"},{"location":"guides/fluxcd/#login-to-github-container-registry","title":"Login to GitHub Container Registry","text":"<p>Export you GitHub username:</p> <pre><code>export GITHUB_USER=\"YOUR-GITHUB-USERNAME\"\n</code></pre> <p>Generate a personal access token (PAT) with read and write access to GitHub Container Registry.</p> <pre><code>export GITHUB_TOKEN=\"YOUR-GITHUB-PAT\"\n</code></pre> <p>Use the token to sign in to the container registry service at ghcr.io:</p> <pre><code>$ echo $GITHUB_TOKEN | docker login ghcr.io -u ${GITHUB_USER} --password-stdin\n&gt; Login Succeeded\n</code></pre> <p>Other container registries</p> <p>Besides GHCR, both Kustomizer and Flux are compatible with Docker Hub, ACR, ECR, GCR, self-hosted Docker Registry v2 and any other registry that conforms to the Open Container Initiative.</p>"},{"location":"guides/fluxcd/#clone-the-demo-app-repository","title":"Clone the demo app repository","text":"<p>Clone the Kustomizer Git repository locally:</p> <pre><code>git clone https://github.com/stefanprodan/kustomizer\ncd kustomizer\n</code></pre> <p>You'll be using a sample web application composed of two podinfo instances called <code>frontend</code> and <code>backend</code>, and a redis instance called <code>cache</code>. The web application's Kubernetes configuration is located at <code>./examples/demo-app</code>.</p>"},{"location":"guides/fluxcd/#publish-the-app-manifests","title":"Publish the app manifests","text":"<p>Export the repository URL and app version:</p> <pre><code>export APP_REPO=\"ghcr.io/${GITHUB_USER}/kustomizer-demo-app\"\nexport APP_VERSION=\"1.0.0\"\n</code></pre> <p>Build and push the app manifests to GitHub container registry:</p> <pre><code>$ kustomizer push artifact oci://${APP_REPO}:${APP_VERSION} \\\n-k ./examples/demo-app \\\n--source=\"$(git config --get remote.origin.url)\" \\\n--revision=\"$(git branch --show-current)/$(git rev-parse HEAD)\"\nbuilding manifests...\nNamespace/kustomizer-demo-app\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\nService/kustomizer-demo-app/backend\nService/kustomizer-demo-app/cache\nService/kustomizer-demo-app/frontend\nDeployment/kustomizer-demo-app/backend\nDeployment/kustomizer-demo-app/cache\nDeployment/kustomizer-demo-app/frontend\nHorizontalPodAutoscaler/kustomizer-demo-app/backend\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend\npushing image ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0\npublished digest ghcr.io/stefanprodan/kustomizer-demo-app@sha256:91d2bd8e0f1620e17e9d4c308ab87903644a952969d8ff52b601be0bffdca096\n</code></pre> <p>Tag the config image as latest:</p> <pre><code>kustomizer tag artifact oci://${APP_REPO}:${APP_VERSION} latest\n</code></pre>"},{"location":"guides/fluxcd/#configure-flux-to-deploy-the-app","title":"Configure Flux to deploy the app","text":"<p>First install Flux on your cluster with:</p> <pre><code>flux install\n</code></pre> <p>GitOps</p> <p>For Flux to manage your cluster in a GitOps manner, you could use the flux bootstrap instead of <code>flux install</code>.</p> <p>Create an image pull secret for ghcr.io with:</p> <pre><code>flux create secret oci ghcr-auth \\\n--url=ghcr.io \\\n--username=flux \\\n--password=${GITHUB_TOKEN}\n</code></pre> <p>Create a Flux <code>OCIRepository</code> for pulling the latest artifact from GitHub container registry:</p> <pre><code>flux create source oci demo-app \\\n--secret-ref=ghcr-auth \\\n--url=oci://${APP_REPO} \\\n--tag=latest \\\n--interval=1m\n</code></pre> <p>Automated updates</p> <p>At every minute, Flux verifies if the latest OCI artifact digest differs from the digest of the last downloaded artifact. When a new artifact is tagged as latest, Flux will detect the new version and will pull it inside the cluster.</p> <p>Create a Flux <code>Kustomization</code> for applying the manifests from the artifact on the cluster:</p> <pre><code>flux create kustomization demo-app \\\n--source=OCIRepository/demo-app \\\n--prune=true \\\n--wait=true \\\n--health-check-timeout=3m \\\n--interval=10m\n</code></pre> <p>Automated reconciliation</p> <p>Every time a new version of the OCI artifact is downloaded, Flux reconciles the changes in the Kubernetes manifests from the artifact with the cluster state.</p> <p>During a reconciliation, Flux performs these tasks:</p> <ul> <li>Validates the manifests against the Kubernetes API (server-side apply dry run)</li> <li>Applies the Kubernetes objects that changed in order (namespaces and other global objects first)</li> <li>Deletes the objects that were removed from the latest artifact version</li> <li>Waits for the changes to be successfully rollout (Helm upgrades, deployments, jobs, etc)</li> <li>Reports the apply diff or any error as Kubernetes events</li> </ul> <p>You can see the apply diff and any other Flux events with:</p> <pre><code>kubectl alpha events --for kustomization/demo-app -n flux-system\n</code></pre> <p>Drift detection and correction</p> <p>Even if nothing changed in the OCI source, Flux verifies if the cluster state has drifted from the desired state. If a drift is detected, Flux re-applies the Kubernetes objects that changed and waits for the drift  to be corrected. Then it emits a Kubernetes events with the list of objects  that were corrected.</p>"},{"location":"guides/fluxcd/#promote-changes-to-production","title":"Promote changes to production","text":"<p>Assuming you're deploying the <code>latest</code> version to staging, you could introduce  a dedicated tag for production e.g. <code>stable</code>.</p> <p>On the production cluster, you'll configure Flux to reconcile the artifacts tagged as <code>stable</code>:</p> <pre><code>flux create source oci demo-app \\\n--secret-ref=ghcr-auth \\\n--url=oci://${APP_REPO} \\\n--tag=stable \\\n--interval=1m\n</code></pre> <p>To promote a version tested on staging, you would tag it as stable with:</p> <pre><code>kustomizer tag artifact oci://${APP_REPO}:${APP_VERSION} stable\n</code></pre>"},{"location":"guides/fluxcd/#automate-the-artifact-publishing","title":"Automate the artifact publishing","text":"<p>You can automate the publishing process by running Kustomizer in CI.</p> <p>Here is an example of a GitHub Actions workflow that pushes an OCI artifact to GHCR every time there is a change to the Kubernetes configuration:</p> <pre><code>name: publish\non:\npush:\nbranches:\n- 'main'\npaths:\n- 'examples/demo-app/**'\n\npermissions:\ncontents: read\nid-token: write\npackages: write\n\nenv:\nARTIFACT: oci://ghcr.io/${{github.repository_owner}}/${{github.event.repository.name}}\n\njobs:\nkustomizer:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v3\n- name: Login to GitHub Container Registry\nuses: docker/login-action@v2\nwith:\nregistry: ghcr.io\nusername: ${{ github.actor }}\npassword: ${{ secrets.GITHUB_TOKEN }}\n- name: Setup kustomizer\nuses: stefanprodan/kustomizer/action@main\n- name: Push\nrun: |\nkustomizer push artifact ${ARTIFACT}:${GITHUB_REF_NAME} \\\n-k=examples/demo-app \\\n--source=${{ github.repositoryUrl }} \\\n--revision=\"${{ github.ref_name }}/${{ github.sha }}\"\n- name: Tag latest\nrun: |\nkustomizer tag artifact ${ARTIFACT}:${GITHUB_REF_NAME} latest\n</code></pre> <p>For more details on how to use Kustomizer within GitHub workflows, please see the GitHub Actions documentation.</p>"},{"location":"guides/secure-supply-chain/","title":"Secure your Kubernetes supply chain with Kustomizer and Cosign","text":"<p>Kustomizer offers a way to distribute Kubernetes configuration as OCI artifacts. This means you can store your application configuration in the same  registry where your application container images are.</p> <p>Cosign is tool for signing and verifying OCI artifacts. You can use Cosign to sign both your application container images (created with Docker) and the config images (created with Kustomizer).</p> <p>Delivery workflow</p> <p>As an application publisher you:</p> <ul> <li>release a new app version</li> <li>build and push the app container image</li> <li>update the app version in the Kubernetes configuration</li> <li>build and push the app config image</li> <li>sign the app and config images</li> </ul> <p>As a Kubernetes operator you:</p> <ul> <li>verify the config image signature</li> <li>inspect the config image and extract the app container image name</li> <li>verify the container image signature</li> <li>scan the container image for vulnerabilities</li> <li>deploy the app onto clusters using the Kubernetes manifests from the config image    </li> </ul> <p>What follows is a guide on how to use Kustomizer, Cosign, Trivy and GitHub Container Registry to build a secure delivery pipeline for a sample application.</p>"},{"location":"guides/secure-supply-chain/#prerequisites","title":"Prerequisites","text":"<p>To follow this guide you'll need a GitHub account and a Kubernetes cluster version 1.20 or newer.</p> <p>Install cosign, trivy, yq and Kustomizer with Homebrew:</p> <pre><code>brew install cosign yq aquasecurity/trivy/trivy stefanprodan/tap/kustomizer\n</code></pre> <p>Generate a cosign key pair for image signing with:</p> <pre><code>cosign generate-key-pair\n</code></pre>"},{"location":"guides/secure-supply-chain/#login-to-github-container-registry","title":"Login to GitHub Container Registry","text":"<p>Export you GitHub username:</p> <pre><code>export GITHUB_USER=\"YOUR-GITHUB-USERNAME\"\n</code></pre> <p>Generate a personal access token (PAT) with read and write access to GitHub Container Registry. </p> <p>Use the PAT to sign in to the container registry service at ghcr.io:</p> <pre><code>$ echo $CR_PAT | docker login ghcr.io -u ${GITHUB_USER} --password-stdin\n&gt; Login Succeeded\n</code></pre>"},{"location":"guides/secure-supply-chain/#clone-the-demo-app-repository","title":"Clone the demo app repository","text":"<p>Clone the Kustomizer Git repository locally:</p> <pre><code>git clone https://github.com/stefanprodan/kustomizer\ncd kustomizer\n</code></pre> <p>You'll be using a sample web application composed of two podinfo instances called <code>frontend</code> and <code>backend</code>, and a redis instance called <code>cache</code>. The web application's Kubernetes configuration is located at <code>./examples/demo-app</code>.</p>"},{"location":"guides/secure-supply-chain/#publish-and-sign-the-config-image","title":"Publish and Sign the config image","text":"<p>Export the config image URL and version:</p> <pre><code>export CONFIG_IMAGE=\"ghcr.io/${GITHUB_USER}/kustomizer-demo-app\"\nexport CONFIG_VERSION=\"1.0.0\"\n</code></pre> <p>Export your cosign private key password:</p> <pre><code>COSIGN_PASSWORD=&lt;YOUR-PASS&gt;\n</code></pre> <p>Push and sign the config image:</p> <pre><code>$ kustomizer push artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n-k ./examples/demo-app \\\n--sign --cosign-key cosign.key\nbuilding manifests...\nNamespace/kustomizer-demo-app\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\nService/kustomizer-demo-app/backend\nService/kustomizer-demo-app/cache\nService/kustomizer-demo-app/frontend\nDeployment/kustomizer-demo-app/backend\nDeployment/kustomizer-demo-app/cache\nDeployment/kustomizer-demo-app/frontend\nHorizontalPodAutoscaler/kustomizer-demo-app/backend\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend\npushing image ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0\npublished digest ghcr.io/stefanprodan/kustomizer-demo-app@sha256:91d2bd8e0f1620e17e9d4c308ab87903644a952969d8ff52b601be0bffdca096\ncosign pushing signature to: ghcr.io/stefanprodan/kustomizer-demo-app\n</code></pre> <p>Tag the config image as latest:</p> <pre><code>kustomizer tag artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} latest\n</code></pre>"},{"location":"guides/secure-supply-chain/#verify-and-scan-the-app","title":"Verify and Scan the app","text":"<p>Verify the config image using your cosign public key:</p> <pre><code>$ cosign verify --key cosign.pub ${CONFIG_IMAGE}:${CONFIG_VERSION}\nVerification for ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0 --\nThe following checks were performed on each of these signatures:\n  - The cosign claims were validated\n  - The signatures were verified against the specified public key\n  - Any certificates were verified against the Fulcio roots.\n\n[{\"critical\":{\"identity\":{\"docker-reference\":\"ghcr.io/stefanprodan/kustomizer-demo-app\"},\"image\":{\"docker-manifest-digest\":\"sha256:148c7452232a334e4843048ec41180c0c23644c30e87672bd961f31ee7ac2fca\"},\"type\":\"cosign container image signature\"},\"optional\":null}]\n</code></pre> <p>Verify the image using your cosign public key and list the Kubernetes manifests from the config image:</p> <pre><code>$ kustomizer inspect artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n--verify --cosign-key cosign.pub\nArtifact: oci:// ghcr.io/stefanprodan/kustomizer-demo-app@sha256:98ebc5889a1031efe84d0d27cff4a235b9fadd5378781789b8e44cbf177424cd\nBuiltBy: kustomizer/v2.0.0\nVerifiedBy: cosign\nCreatedAt: 2021-12-15T10:05:46Z\nResources:\n- Namespace/kustomizer-demo-app\n- ConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\n- Service/kustomizer-demo-app/backend\n- Service/kustomizer-demo-app/cache\n- Service/kustomizer-demo-app/frontend\n- Deployment/kustomizer-demo-app/backend\n  - ghcr.io/stefanprodan/podinfo:6.0.0\n- Deployment/kustomizer-demo-app/cache\n  - public.ecr.aws/docker/library/redis:6.2.0\n- Deployment/kustomizer-demo-app/frontend\n  - ghcr.io/stefanprodan/podinfo:6.0.0\n- HorizontalPodAutoscaler/kustomizer-demo-app/backend\n- HorizontalPodAutoscaler/kustomizer-demo-app/frontend\n</code></pre> <p>You can list the container images referenced in the Kubernetes manifests and scan them for vulnerabilities with trivy:</p> <pre><code>kustomizer inspect artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n    --container-images | xargs -I {} sh -c \"trivy image --severity=CRITICAL {}\"\n</code></pre>"},{"location":"guides/secure-supply-chain/#install-the-app","title":"Install the app","text":"<p>Install the demo application using the manifests from the config image:</p> <pre><code>$ kustomizer apply inventory kustomizer-demo-app --wait --prune \\\n--artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n--source ${CONFIG_IMAGE} \\\n--revision ${CONFIG_VERSION}\npulling ghcr.io/stefanprodan/kustomizer-demo-app:1.0.0\napplying 10 manifest(s)...\nNamespace/kustomizer-demo-app created\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k created\nService/kustomizer-demo-app/backend created\nService/kustomizer-demo-app/cache created\nService/kustomizer-demo-app/frontend created\nDeployment/kustomizer-demo-app/backend created\nDeployment/kustomizer-demo-app/cache created\nDeployment/kustomizer-demo-app/frontend created\nHorizontalPodAutoscaler/kustomizer-demo-app/backend created\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend created\nwaiting for resources to become ready...\nall resources are ready\n</code></pre> <p>List inventories:</p> <pre><code>$ kustomizer get inventories -n default\nNAME                ENTRIES SOURCE                                      REVISION    LAST APPLIED         \nkustomizer-demo-app 10      ghcr.io/stefanprodan/kustomizer-demo-app    v1.0.0      2021-12-16T10:33:10Z\n</code></pre> <p>Inspect the inventory to find the config image digest:</p> <pre><code>$ kustomizer inspect inv kustomizer-demo-app -n default\nInventory: default/kustomizer-demo-app\nLastAppliedAt: 2021-12-20T23:05:45Z\nSource: oci://ghcr.io/stefanprodan/kustomizer-demo-app\nRevision: v1.0.0\nArtifacts:\n- oci://ghcr.io/stefanprodan/kustomizer-demo-app@sha256:d47a1734843b7144b6fb2f74d525abaaa63ca3ab8c0c82dc748acd541332df9f\nResources:\n- Namespace/kustomizer-demo-app\n- ConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k\n- Service/kustomizer-demo-app/backend\n- Service/kustomizer-demo-app/cache\n- Service/kustomizer-demo-app/frontend\n- Deployment/kustomizer-demo-app/backend\n- Deployment/kustomizer-demo-app/cache\n- Deployment/kustomizer-demo-app/frontend\n- HorizontalPodAutoscaler/kustomizer-demo-app/backend\n- HorizontalPodAutoscaler/kustomizer-demo-app/frontend\n</code></pre>"},{"location":"guides/secure-supply-chain/#publish-app-updates","title":"Publish app updates","text":"<p>Bump the config version:</p> <pre><code>export CONFIG_VERSION=\"1.0.1\"\n</code></pre> <p>Change the Redis container image tag with yq:</p> <pre><code>yq eval '.images[1].newTag=\"6.2.1\"' -i ./examples/demo-app/kustomization.yaml\n</code></pre> <p>Push a new config image:</p> <pre><code>kustomizer push artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n-k ./examples/demo-app/ --sign --cosign-key cosign.key\n</code></pre> <p>Tag the config image as latest:</p> <pre><code>kustomizer tag artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} latest\n</code></pre>"},{"location":"guides/secure-supply-chain/#upgrade-the-app","title":"Upgrade the app","text":"<p>Verify the latest version:</p> <pre><code>kustomizer inspect artifact oci://${CONFIG_IMAGE}:latest \\\n--verify --cosign-key cosign.pub\n</code></pre> <p>Pull the latest config image and diff changes:</p> <pre><code>$ kustomizer diff inventory kustomizer-demo-app --prune \\\n--artifact oci://${CONFIG_IMAGE}:latest \u25ba Deployment/kustomizer-demo-app/cache drifted\n@@ -5,7 +5,7 @@\n     deployment.kubernetes.io/revision: \"1\"\n     env: demo\n   creationTimestamp: \"2021-12-13T19:50:26Z\"\n-  generation: 1\n+  generation: 2\n   labels:\n     app.kubernetes.io/instance: webapp\n     inventory.kustomizer.dev/name: kustomizer-demo-app\n@@ -36,7 +36,7 @@\n       - command:\n         - redis-server\n         - /redis-master/redis.conf\n-        image: public.ecr.aws/docker/library/redis:6.2.0\n+        image: public.ecr.aws/docker/library/redis:6.2.1\n         imagePullPolicy: IfNotPresent\n         livenessProbe:\n           failureThreshold: 3\n</code></pre> <p>Update the app on your cluster:</p> <pre><code>$ kustomizer apply inventory kustomizer-demo-app --wait --prune \\\n--artifact oci://${CONFIG_IMAGE}:latest \\\n--source ${CONFIG_IMAGE} \\\n--revision ${CONFIG_VERSION}\npulling ghcr.io/stefanprodan/kustomizer-demo-app:latest\napplying 10 manifest(s)...\nNamespace/kustomizer-demo-app unchanged\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k unchanged\nService/kustomizer-demo-app/backend unchanged\nService/kustomizer-demo-app/cache unchanged\nService/kustomizer-demo-app/frontend unchanged\nDeployment/kustomizer-demo-app/backend unchanged\nDeployment/kustomizer-demo-app/cache configured\nDeployment/kustomizer-demo-app/frontend unchanged\nHorizontalPodAutoscaler/kustomizer-demo-app/backend unchanged\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend unchanged\nwaiting for resources to become ready...\nall resources are ready\n</code></pre>"},{"location":"guides/secure-supply-chain/#patch-upstream-configs","title":"Patch upstream configs","text":"<p>At apply time, you can modify the manifests using kustomize patches.</p> <p>Mark the application pods as safe to evict by the cluster autoscaler with:</p> <pre><code>$ kustomizer apply inventory kustomizer-demo-app --wait --prune \\\n--artifact oci://${CONFIG_IMAGE}:${CONFIG_VERSION} \\\n--source ${CONFIG_IMAGE} \\\n--revision ${CONFIG_VERSION} \\\n--patch ./examples/patches/safe-to-evict.yaml\npulling ghcr.io/stefanprodan/kustomizer-demo-app:1.0.1\napplying 10 manifest(s)...\nNamespace/kustomizer-demo-app unchanged\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k unchanged\nService/kustomizer-demo-app/backend unchanged\nService/kustomizer-demo-app/cache unchanged\nService/kustomizer-demo-app/frontend unchanged\nDeployment/kustomizer-demo-app/backend configured\nDeployment/kustomizer-demo-app/cache configured\nDeployment/kustomizer-demo-app/frontend configured\nHorizontalPodAutoscaler/kustomizer-demo-app/backend unchanged\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend unchanged\nwaiting for resources to become ready...\nall resources are ready\n</code></pre>"},{"location":"guides/secure-supply-chain/#uninstall-the-app","title":"Uninstall the app","text":"<p>Delete the app and its inventory from your cluster:</p> <pre><code>$ kustomizer delete inventory kustomizer-demo-app --wait\nretrieving inventory...\ndeleting 10 manifest(s)...\nHorizontalPodAutoscaler/kustomizer-demo-app/frontend deleted\nHorizontalPodAutoscaler/kustomizer-demo-app/backend deleted\nDeployment/kustomizer-demo-app/frontend deleted\nDeployment/kustomizer-demo-app/cache deleted\nDeployment/kustomizer-demo-app/backend deleted\nService/kustomizer-demo-app/frontend deleted\nService/kustomizer-demo-app/cache deleted\nService/kustomizer-demo-app/backend deleted\nConfigMap/kustomizer-demo-app/redis-config-bd2fcfgt6k deleted\nNamespace/kustomizer-demo-app deleted\nConfigMap/default/kustomizer-demo-app deleted\nwaiting for resources to be terminated...\nall resources have been deleted\n</code></pre>"}]}